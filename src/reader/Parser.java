
//----------------------------------------------------
// The following code was generated by jh-javacup-1.3 20220622
// Sat May 27 13:28:24 CEST 2023
//----------------------------------------------------

package reader;

import fr.uha.hassenforder.jcupnflex.ErrorManager;
import fr.uha.hassenforder.jcupnflex.model.Associativity;
import fr.uha.hassenforder.jcupnflex.model.Directive;
import fr.uha.hassenforder.jcupnflex.model.DirectiveSet;
import fr.uha.hassenforder.jcupnflex.model.IFactory;
import fr.uha.hassenforder.jcupnflex.model.Grammar;
import fr.uha.hassenforder.jcupnflex.model.GrammarSymbol;
import fr.uha.hassenforder.jcupnflex.model.NonTerminal;
import fr.uha.hassenforder.jcupnflex.model.Production;
import fr.uha.hassenforder.jcupnflex.model.ProductionPart;
import fr.uha.hassenforder.jcupnflex.model.RegExp;
import fr.uha.hassenforder.jcupnflex.model.State;
import fr.uha.hassenforder.jcupnflex.model.SymbolKind;
import fr.uha.hassenforder.jcupnflex.model.Terminal;

/** jh-javacup-1.3 20220622 generated parser.
  * @version Sat May 27 13:28:24 CEST 2023
  */
public class Parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\314\000\002\000\001\000\001\000\001\001\002" +
    "\002\002\036\003\036\003\036\002\036\003\036" +
    "\003\036\003\036\002\041\002\004\001\005\001" +
    "\055\002\006\002\044\001\044\003\007\001\010" +
    "\001\010\003\057\002\011\002\012\002\013\002" +
    "\014\002\061\002\015\002\016\003\017\001\017" +
    "\001\037\002\037\001\051\002\020\003\021\002" +
    "\066\002\022\002\023\004\023\005\071\002\024" +
    "\002\025\002\025\004\025\004\025\003\025\004" +
    "\025\005\073\002\026\002\042\001\027\002\030" +
    "\003\031\002\032\001\032\001\032\001\075\002" +
    "\033\002\034\002\035\001\045\001\045\003\045" +
    "\004\046\001\046\003\047\001\047\001\040\002" +
    "\040\002\040\002\040\001\040\001\040\003\050" +
    "\001\050\003\050\003\070\000\064\000\064\002" +
    "\077\001\077\002\063\000\065\000\054\000\054" +
    "\002\056\000\056\002\060\000\060\002\062\000" +
    "\062\002\067\000\067\002\072\000\072\002\074" +
    "\000\074\002\076\000\076\002\264\264\266\u042a" +
    "\264\u02ca\u0408\264\u03c6\u0384\u01b6\376\u0164\u0418\264" +
    "\u0338\u0316\u0588\264\264\u02ba\u0308\u02f6\u02d4\u0298\u0288" +
    "\u0278\u025a\u0246\u022c\u0e76\264\u0204\u0408\264\u0706\u01f4" +
    "\276\u0532\u01ce\u0aca\u0182\u016a\266\264\u037c\270\272" +
    "\u0d5e\u0d26\u0cee\u0cb6\u0400\u036a\u0e3e\u0570\264\u090c\u0214" +
    "\u0202\264\264\264\264\264\264\u051a\u04e2\u01c2\u0b72" +
    "\u0e06\u0b1e\u0c46\264\264\u0342\u04da\u0300\u03e2\u03ca\u03bc" +
    "\u03aa\u04d6\u04be\u0194\u0488\u0388\u0150\u0402\u0538\u03de\u0140" +
    "\u08c2\u0354\u0408\u03ce\u0104\u0166\326\u03b8\360\u047e\u0174" +
    "\270\u045c\u02be\u0410\u0a76\u0402\u0530\u039c\u0a22\u0dce\u06ac" +
    "\u07e4\u0650\u0878\u05f4\u038c\u0400\u0346\u0376\u0200\u035a\u03f4" +
    "\u01ea\u034a\u0d96\u03d0\u0918\u0484\u02ca\u0288\u06d6\u0c0e\u038e" +
    "\u0c7e\u034c\u082e\u0334\u09ea\u09a0\u0318\u0598\u027c\u053c\u04e0" +
    "\u079a\u01a8\u03f0\u01d2\u0308\u0174\u0114\u0106\u02f2\u0190\u02d6" +
    "\u030a\u0bc0\u0114\u023a\u01f8\u0118\u02c6\u0484\u0956\u0750\u02b0" +
    "\u0108\u0294\u0284\u026e\u024a\274\u0210\u0166\u0174\u0114\u0200" +
    "\u01be\u0ed8\256\000\000\000\000\000\164\000\000" +
    "\000\000\000\000\166\000\000\000\162\260\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\154\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\154\000\000\000\154\154\154\154\154" +
    "\154\000\000\000\000\000\000\000\154\012\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\036\105\003\002\001" +
    "\007\264\001\264\001\264\001\053\046\052\046" +
    "\055\046\056\231\146\u010b\053\046\052\046\055" +
    "\046\056\070\255\240\044\054\044\054\044\225" +
    "\255\240\036\211\036\211\036\211\053\022\036" +
    "\117\036\203\036\211\255\u0167\036\211\036\211" +
    "\036\211\036\117\036\211\141\367\036\211\036" +
    "\117\036\211\052\235\036\211\036\211\036\117" +
    "\143\112\036\203\036\211\036\211\036\211\036" +
    "\117\036\211\237\105\055\241\237\u0101\137\112" +
    "\231\240\250\240\141\371\261\315\231\240\250" +
    "\240\261\236\230\240\261\236\242\072\242\072" +
    "\230\240\231\u0159\250\u0165\012\137\012\141\237" +
    "\117\237\117\237\117\230\u0157\237\117\261\236" +
    "\237\117\012\143\237\117\237\117\237\117\237" +
    "\117\237\117\132\112\237\117\237\117\237\117" +
    "\231\u015b\237\117\237\117\237\117\126\156\261" +
    "\236\237\117\237\117\237\117\237\117\237\117" +
    "\145\105\051\046\145\u0101\257\210\140\240\257" +
    "\210\051\046\260\315\140\240\140\363\260\234" +
    "\227\240\260\234\050\231\013\147\227\240\140" +
    "\365\051\233\050\066\013\151\145\117\145\117" +
    "\145\117\227\u0155\145\117\260\234\145\117\123" +
    "\076\145\117\145\117\145\117\145\117\145\117" +
    "\011\105\145\117\145\117\145\117\223\240\145" +
    "\117\145\117\145\117\223\240\260\234\145\117" +
    "\145\117\145\117\145\117\145\117\263\144\223" +
    "\u014f\103\174\233\301\263\144\011\123\011\125" +
    "\011\127\046\064\011\117\233\303\011\117\011" +
    "\131\011\133\011\117\011\117\011\117\011\117" +
    "\241\105\011\117\011\117\011\117\174\240\011" +
    "\117\011\117\011\117\174\240\043\014\011\117" +
    "\011\117\011\117\011\117\011\117\262\124\174" +
    "\u0135\037\221\225\271\262\124\241\117\241\117" +
    "\241\117\256\146\241\117\225\273\241\117\256" +
    "\146\241\117\241\117\241\117\241\117\241\117" +
    "\240\105\241\117\241\117\241\117\034\201\241" +
    "\117\241\117\241\117\171\u012f\072\301\241\117" +
    "\241\117\241\117\241\117\241\117\171\u0131\072" +
    "\303\033\177\071\271\254\142\240\117\240\117" +
    "\240\117\254\142\240\117\071\273\240\117\032" +
    "\175\240\117\240\117\240\117\240\117\240\117" +
    "\217\105\240\117\240\117\240\117\253\136\240" +
    "\117\240\117\240\117\253\136\031\173\240\117" +
    "\240\117\240\117\240\117\240\117\252\134\203" +
    "\206\030\171\203\206\252\134\217\u014d\217\u014d" +
    "\217\u014d\251\126\217\u014d\027\167\217\u014d\251" +
    "\126\217\u014d\217\u014d\217\u014d\217\u014d\217\u014d" +
    "\150\105\217\u014d\217\u014d\217\u014d\247\122\217" +
    "\u014d\217\u014d\217\u014d\247\122\023\157\217\u014d" +
    "\217\u014d\217\u014d\217\u014d\217\u014d\243\116\202" +
    "\u013d\004\103\202\u013f\243\116\150\111\150\111" +
    "\150\111\234\310\150\111\026\165\150\111\234" +
    "\310\150\111\150\111\150\111\150\111\150\111" +
    "\114\105\150\111\150\111\150\111\232\140\150" +
    "\111\150\111\150\111\232\140\025\163\150\111" +
    "\150\111\150\111\150\111\150\111\226\304\235" +
    "\170\235\170\024\161\226\304\114\325\114\325" +
    "\114\325\215\110\114\325\017\040\114\325\215" +
    "\110\114\325\114\325\114\325\114\325\114\325" +
    "\112\105\114\325\114\325\114\325\212\300\114" +
    "\325\114\325\114\325\212\300\016\036\114\325" +
    "\114\325\114\325\114\325\114\325\175\150\210" +
    "\274\210\274\167\u0129\175\u0137\112\317\112\317" +
    "\112\317\172\132\112\317\134\355\112\317\172" +
    "\132\112\317\112\317\112\317\112\317\112\317" +
    "\010\105\112\317\112\317\112\317\170\130\112" +
    "\317\112\317\112\317\170\u012b\064\253\112\317" +
    "\112\317\112\317\112\317\112\317\165\114\206" +
    "\060\206\060\054\237\165\114\010\117\010\117" +
    "\010\117\155\120\010\117\125\030\010\117\155" +
    "\u0113\010\117\010\117\010\117\010\117\010\117" +
    "\007\105\010\117\010\117\010\117\142\306\010" +
    "\117\010\117\010\117\142\306\120\024\010\117" +
    "\010\117\010\117\010\117\010\117\136\302\177" +
    "\314\177\314\117\020\136\302\007\111\007\111" +
    "\007\111\131\276\007\111\116\026\007\111\131" +
    "\276\007\111\007\111\007\111\007\111\007\111" +
    "\005\105\007\111\007\111\007\111\115\016\007" +
    "\111\007\111\007\111\153\074\153\u010f\007\111" +
    "\007\111\007\111\007\111\007\111\151\270\151" +
    "\270\002\011\002\007\063\032\005\107\005\107" +
    "\005\107\040\223\005\107\224\u0151\005\107\173" +
    "\u0133\005\107\005\107\005\107\005\107\005\107" +
    "\166\u0127\005\107\005\107\005\107\135\357\005" +
    "\107\005\107\005\107\002\013\127\331\005\107" +
    "\005\107\005\107\005\107\005\107\002\015\002" +
    "\017\002\021\002\023\002\025\147\056\147\056" +
    "\014\153\002\027\002\031\002\033\264\001\002" +
    "\035\002\037\002\041\002\043\244\230\244\230" +
    "\244\230\244\230\264\001\201\315\144\172\144" +
    "\375\201\212\244\230\201\212\124\272\124\272" +
    "\244\230\264\001\244\230\244\230\244\230\244" +
    "\230\244\230\244\230\244\230\264\001\244\230" +
    "\244\230\264\001\244\230\244\230\244\230\264" +
    "\001\244\230\264\001\244\230\264\001\244\230" +
    "\244\230\244\230\244\230\122\102\122\102\244" +
    "\230\244\230\244\230\244\230\264\001\244\230" +
    "\221\220\221\220\221\220\221\220\121\100\121" +
    "\100\113\062\113\321\264\001\221\220\102\312" +
    "\102\312\264\001\221\220\264\001\221\220\221" +
    "\220\221\220\221\220\221\220\221\220\221\220" +
    "\264\001\221\220\221\220\264\001\221\220\221" +
    "\220\221\220\264\001\221\220\264\001\221\220" +
    "\264\001\221\220\221\220\221\220\221\220\101" +
    "\052\101\052\221\220\221\220\221\220\221\220" +
    "\264\001\221\220\220\216\220\216\220\216\220" +
    "\216\045\266\045\266\154\042\154\042\264\001" +
    "\220\216\130\264\130\264\264\001\220\216\264" +
    "\001\220\216\220\216\220\216\220\216\220\216" +
    "\220\216\220\216\264\001\220\216\220\216\264" +
    "\001\220\216\220\216\220\216\264\001\220\216" +
    "\264\001\220\216\264\001\220\216\220\216\220" +
    "\216\220\216\066\044\066\257\220\216\220\216" +
    "\220\216\220\216\264\001\220\216\216\222\216" +
    "\222\216\222\216\222\020\262\020\262\264\001" +
    "\264\001\264\001\216\222\264\001\264\001\264" +
    "\001\216\222\264\001\216\222\216\222\216\222" +
    "\216\222\216\222\216\222\216\222\264\001\216" +
    "\222\216\222\264\001\216\222\216\222\216\222" +
    "\264\001\216\222\264\001\216\222\264\001\216" +
    "\222\216\222\216\222\216\222\264\001\264\001" +
    "\216\222\216\222\216\222\216\222\264\001\216" +
    "\222\164\u011d\164\252\164\252\164\u011f\264\001" +
    "\264\001\264\001\264\001\264\001\164\252\264" +
    "\001\264\001\264\001\164\252\264\001\164\252" +
    "\164\u0121\164\u0123\164\252\164\252\164\252\164" +
    "\252\264\001\164\252\164\252\264\001\164\252" +
    "\164\252\164\252\264\001\164\252\264\001\164" +
    "\252\264\001\164\252\164\252\164\252\164\252" +
    "\264\001\264\001\164\252\164\252\164\252\164" +
    "\252\264\001\164\252\162\226\162\226\162\226" +
    "\162\226\264\001\264\001\264\001\264\001\264" +
    "\001\162\226\264\001\264\001\264\001\162\226" +
    "\264\001\162\226\162\226\162\226\162\226\162" +
    "\226\162\226\162\226\264\001\162\226\162\226" +
    "\264\001\162\226\162\226\162\226\264\001\162" +
    "\226\264\001\162\226\264\001\162\226\162\226" +
    "\162\226\162\226\264\001\264\001\162\226\162" +
    "\226\162\226\162\226\264\001\162\226\160\224" +
    "\160\224\160\224\160\224\264\001\264\001\264" +
    "\001\264\001\264\001\160\224\264\001\264\001" +
    "\264\001\160\224\264\001\160\224\160\224\160" +
    "\224\160\224\160\224\160\224\160\224\264\001" +
    "\160\224\160\224\264\001\160\224\160\224\160" +
    "\224\204\214\160\224\204\214\160\224\264\001" +
    "\160\224\160\224\160\224\160\224\264\001\264" +
    "\001\160\224\160\224\160\224\160\224\204\u0141" +
    "\160\224\042\152\042\152\264\001\042\152\042" +
    "\152\264\001\042\152\042\152\042\152\042\152" +
    "\042\152\264\001\042\152\264\001\042\152\204" +
    "\u0143\264\001\042\152\042\152\042\152\042\152" +
    "\264\001\042\152\042\152\264\001\042\152\042" +
    "\152\042\152\264\001\042\152\264\001\042\152" +
    "\264\001\042\152\042\152\042\152\042\152\246" +
    "\034\246\034\042\152\042\152\042\152\042\152" +
    "\264\001\042\152\246\034\264\001\264\001\264" +
    "\001\246\034\264\001\246\034\264\001\264\001" +
    "\246\034\246\034\246\034\246\034\264\001\246" +
    "\034\246\034\264\001\246\034\246\034\246\034" +
    "\264\001\246\034\264\001\246\034\264\001\246" +
    "\034\246\034\246\034\246\034\222\104\222\104" +
    "\246\034\246\034\246\034\246\034\264\001\246" +
    "\034\222\104\264\001\264\001\264\001\222\104" +
    "\264\001\222\104\264\001\264\001\222\104\222" +
    "\104\222\104\222\104\264\001\222\104\222\104" +
    "\264\001\222\104\222\104\222\104\264\001\222" +
    "\104\264\001\222\104\264\001\222\104\222\104" +
    "\222\104\222\104\161\106\161\106\222\104\222" +
    "\104\222\104\222\104\264\001\222\104\161\106" +
    "\264\001\264\001\264\001\161\106\264\001\161" +
    "\106\264\001\264\001\161\106\161\106\161\106" +
    "\161\106\264\001\161\106\161\106\264\001\161" +
    "\106\161\106\161\106\264\001\161\106\264\001" +
    "\161\106\264\001\161\106\161\106\161\106\161" +
    "\106\211\242\264\001\161\106\161\106\161\106" +
    "\161\106\264\001\161\106\211\242\264\001\264" +
    "\001\264\001\211\242\264\001\211\242\264\001" +
    "\264\001\211\242\211\242\211\242\211\242\264" +
    "\001\211\242\211\242\264\001\211\242\211\242" +
    "\211\242\264\001\211\242\264\001\211\242\264" +
    "\001\211\242\211\242\211\242\211\242\163\244" +
    "\264\001\211\242\211\242\211\242\211\242\264" +
    "\001\211\242\163\244\264\001\264\001\264\001" +
    "\163\244\264\001\163\244\264\001\264\001\163" +
    "\244\163\244\163\244\163\244\264\001\163\244" +
    "\163\244\264\001\163\244\163\244\163\244\264" +
    "\001\163\244\264\001\163\244\264\001\163\244" +
    "\163\244\163\244\163\244\133\335\264\001\163" +
    "\244\163\244\163\244\163\244\264\001\163\244" +
    "\133\254\264\001\264\001\264\001\133\254\264" +
    "\001\133\337\264\001\264\001\133\341\133\341" +
    "\133\341\133\343\264\001\133\341\133\341\264" +
    "\001\133\341\133\341\133\341\264\001\133\341" +
    "\264\001\133\341\264\001\133\341\133\345\133" +
    "\341\133\341\070\242\264\001\133\341\133\341" +
    "\133\341\133\341\264\001\133\341\070\242\264" +
    "\001\264\001\264\001\070\242\200\232\070\242" +
    "\200\232\264\001\070\242\070\242\070\242\070" +
    "\242\264\001\070\242\070\242\264\001\070\242" +
    "\070\242\070\242\200\232\070\242\264\001\070" +
    "\242\264\001\070\242\070\242\070\242\070\242" +
    "\245\250\245\250\070\242\070\242\070\242\070" +
    "\242\264\001\070\242\200\232\264\001\264\001" +
    "\264\001\264\001\264\001\264\001\264\001\264" +
    "\001\245\250\245\250\245\250\245\250\264\001" +
    "\245\250\245\250\264\001\245\250\245\250\245" +
    "\250\264\001\245\250\264\001\245\250\264\001" +
    "\245\250\245\250\245\250\245\250\214\335\214" +
    "\u0149\245\250\245\250\245\250\245\250\264\001" +
    "\245\250\264\001\264\001\264\001\264\001\264" +
    "\001\264\001\264\001\264\001\264\001\214\341" +
    "\214\341\214\341\214\343\264\001\214\341\214" +
    "\341\264\001\214\341\214\341\214\341\264\001" +
    "\214\341\264\001\214\341\264\001\214\341\214" +
    "\345\214\341\214\341\213\246\213\246\214\341" +
    "\214\341\214\341\214\341\264\001\214\341\264" +
    "\001\264\001\264\001\264\001\264\001\264\001" +
    "\264\001\264\001\264\001\213\246\213\246\213" +
    "\246\213\246\264\001\213\246\213\246\264\001" +
    "\213\246\213\246\213\246\156\335\213\246\264" +
    "\001\213\246\264\001\213\246\213\246\213\246" +
    "\213\246\264\001\264\001\213\246\213\246\213" +
    "\246\213\246\264\001\213\246\156\341\156\341" +
    "\156\341\156\343\264\001\156\341\156\341\264" +
    "\001\156\341\156\341\156\341\264\001\156\341" +
    "\264\001\156\341\264\001\156\341\156\345\156" +
    "\341\156\341\264\001\264\001\156\341\156\341" +
    "\156\341\156\341\264\001\156\341\152\050\152" +
    "\050\264\001\152\050\152\050\152\050\152\050" +
    "\264\001\264\001\264\001\264\001\264\001\264" +
    "\001\264\001\152\050\152\050\152\050\264\001" +
    "\264\001\152\050\152\050\264\001\152\050\152" +
    "\050\152\050\264\001\152\050\264\001\152\050" +
    "\264\001\152\050\264\001\152\050\152\050\264" +
    "\001\264\001\152\050\152\050\152\050\152\050" +
    "\264\001\152\050\047\046\047\046\264\001\047" +
    "\046\047\046\047\046\047\046\264\001\264\001" +
    "\264\001\264\001\264\001\264\001\264\001\047" +
    "\046\047\046\047\046\264\001\264\001\047\046" +
    "\047\046\264\001\047\046\047\046\047\046\264" +
    "\001\047\046\264\001\047\046\264\001\047\046" +
    "\264\001\047\046\047\046\264\001\264\001\047" +
    "\046\047\046\047\046\047\046\264\001\047\046" +
    "\106\231\106\200\264\001\106\313\106\200\264" +
    "\001\106\200\264\001\264\001\264\001\264\001" +
    "\264\001\264\001\264\001\106\200\106\200\106" +
    "\200\264\001\264\001\106\200\106\200\264\001" +
    "\106\200\106\200\106\200\264\001\106\200\264" +
    "\001\106\200\264\001\106\200\264\001\106\200" +
    "\106\200\264\001\264\001\106\200\106\200\106" +
    "\200\106\200\264\001\106\200\104\046\104\046" +
    "\264\001\104\046\264\001\104\052\104\052\264" +
    "\001\264\001\264\001\264\001\264\001\264\001" +
    "\264\001\104\046\104\046\104\046\264\001\264" +
    "\001\104\046\104\046\264\001\104\046\104\046" +
    "\104\046\264\001\104\046\264\001\104\046\264" +
    "\001\104\046\264\001\104\046\104\046\264\001" +
    "\264\001\104\046\104\046\104\046\104\046\236" +
    "\204\104\046\264\001\236\204\264\001\236\204" +
    "\264\001\264\001\264\001\264\001\264\001\264" +
    "\001\264\001\236\204\236\204\236\204\264\001" +
    "\264\001\236\204\236\204\264\001\236\204\236" +
    "\204\236\204\264\001\236\204\264\001\236\204" +
    "\264\001\236\204\264\001\236\204\236\204\264" +
    "\001\264\001\236\204\236\204\236\204\236\204" +
    "\205\202\236\204\264\001\205\202\264\001\205" +
    "\202\264\001\264\001\264\001\264\001\264\001" +
    "\264\001\264\001\205\202\205\202\205\202\264" +
    "\001\264\001\205\202\205\202\264\001\205\202" +
    "\205\202\205\202\264\001\205\202\264\001\205" +
    "\202\107\315\205\202\264\001\205\202\205\202" +
    "\264\001\264\001\205\202\205\202\205\202\205" +
    "\202\264\001\205\202\107\176\107\176\107\176" +
    "\264\001\264\001\107\176\107\176\264\001\107" +
    "\176\107\176\107\176\264\001\107\176\264\001" +
    "\107\176\264\001\107\176\264\001\107\176\107" +
    "\176\264\001\264\001\107\176\107\176\107\176" +
    "\107\176\264\001\107\176\207\243\207\243\207" +
    "\243\264\001\264\001\207\243\207\243\264\001" +
    "\207\243\207\243\207\243\264\001\207\243\264" +
    "\001\207\243\264\001\207\243\207\245\207\243" +
    "\207\243\264\001\264\001\207\243\207\243\207" +
    "\243\207\243\264\001\207\243\062\243\062\243" +
    "\062\243\264\001\264\001\062\243\062\243\264" +
    "\001\062\243\062\243\062\243\264\001\062\243" +
    "\264\001\062\243\264\001\062\243\062\245\062" +
    "\243\062\243\264\001\264\001\062\243\062\243" +
    "\062\243\062\243\264\001\062\243\061\006\061" +
    "\006\061\006\264\001\264\001\061\006\061\006" +
    "\264\001\061\006\061\006\061\006\264\001\061" +
    "\006\264\001\061\006\264\001\061\006\061\006" +
    "\061\006\061\006\264\001\264\001\061\006\061" +
    "\006\061\006\061\006\264\001\061\006\060\010" +
    "\060\010\060\010\264\001\264\001\060\010\060" +
    "\010\264\001\060\010\060\010\060\010\264\001" +
    "\060\010\264\001\060\010\264\001\060\010\060" +
    "\010\060\010\060\010\264\001\264\001\060\010" +
    "\060\010\060\010\060\010\264\001\060\010\057" +
    "\004\057\004\057\004\264\001\264\001\057\004" +
    "\057\004\264\001\057\004\057\004\057\004\264" +
    "\001\057\004\264\001\057\004\264\001\057\004" +
    "\057\004\057\004\057\004\264\001\264\001\057" +
    "\004\057\004\057\004\057\004\264\001\057\004" +
    "\176\203\176\203\176\203\264\001\264\001\176" +
    "\203\176\203\264\001\176\203\176\203\176\203" +
    "\264\001\176\203\264\001\176\203\264\001\176" +
    "\203\264\001\176\203\176\203\264\001\264\001" +
    "\176\203\176\203\176\203\176\203\264\001\176" +
    "\203\157\u011b\157\u011b\157\u011b\264\001\264\001" +
    "\157\u011b\157\u011b\264\001\157\u011b\157\u011b\157" +
    "\u011b\264\001\157\u011b\264\001\157\u011b\264\001" +
    "\157\u011b\264\001\157\u011b\157\u011b\264\001\264" +
    "\001\157\u011b\157\u011b\157\u011b\157\u011b\264\001" +
    "\157\u011b\105\160\105\160\105\160\264\001\264" +
    "\001\105\160\105\160\264\001\105\160\105\160" +
    "\105\160\264\001\105\160\264\001\105\160\264" +
    "\001\105\160\264\001\105\160\105\160\264\001" +
    "\264\001\105\160\105\160\105\160\105\160\264" +
    "\001\105\160\065\255\065\255\065\255\264\001" +
    "\264\001\065\255\065\255\264\001\065\255\065" +
    "\255\065\255\264\001\065\255\264\001\065\255" +
    "\264\001\065\255\264\001\065\255\065\255\264" +
    "\001\264\001\065\255\065\255\065\255\065\255" +
    "\264\001\065\255\035\203\035\203\035\203\264" +
    "\001\264\001\035\203\035\203\264\001\035\203" +
    "\035\203\035\203\264\001\035\203\264\001\035" +
    "\203\264\001\035\203\264\001\035\203\035\203" +
    "\264\001\264\001\035\203\035\203\035\203\035" +
    "\203\264\001\035\203\264\001\321\000\062\245" +
    "\001\001\065\001\021\053\002\001\001\235\001" +
    "\102\001\065\131\132\102\243\123\251\124\256" +
    "\045\046\136\137\007\014\213\164\206\103\160" +
    "\047\067\056\103\101\105\101\121\002\242\047" +
    "\101\106\107\010\044\133\074\064\133\000\010" +
    "\063\044\163\164\222\214\160\121\124\245\164" +
    "\246\165\160\142\143\057\067\054\047\152\050" +
    "\222\147\165\047\070\106\261\043\215\072\047" +
    "\035\106\260\123\126\122\130\124\066\124\135" +
    "\151\113\031\210\153\070\212\066\000\065\047" +
    "\155\106\201\035\257\204\263\122\262\254\253" +
    "\120\123\005\047\252\106\201\202\203\204\247" +
    "\036\232\003\172\226\044\170\234\043\175\177" +
    "\144\116\001\003\001\110\103\102\001\003\001" +
    "\001\001\116\070\061\001\001\001\001\022\023" +
    "\101\024\025\026\001\077\001\027\030\031\001" +
    "\032\001\033\001\001\001\001\001\001\022\034" +
    "\035\036\001\037\001\040\001\001\001\001\001" +
    "\001\001\001\001\001\001\001\022"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }





/** global variables to store the grammar the directivess and a factory to build various concepts */
	private IFactory factory;
	private Grammar grammar;
	private DirectiveSet directives;

    public void setGrammar(Grammar  grammar) {
        this.grammar = grammar;
    }
    
    public void setFactory(IFactory factory) {
        this.factory = factory;
    }
    
    public void setDirectiveSet(DirectiveSet directives) {
        this.directives = directives;
    }
    



/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {




    private Grammar getGrammar() {
        return parser.grammar;
    }
    
    public IFactory getFactory() {
        return parser.factory;
    }
    
    public DirectiveSet getDirectives() {
        return parser.directives;
    }
    
	/** current kind of symbol to declare */
	private SymbolKind currentKind;
	/** current type of symbol to declare */
	private String currentType;

	/** Current precedence priority */
	private int currentPriority = 0;
	/** Current precedence associativity */
	private Associativity currentAssociativity = Associativity.NO;

	/** update the precedences we are declaring */
	private void updatePrecedence(Associativity associativity) {
		this.currentAssociativity = associativity;
		if (associativity != Associativity.NO) {
			++this.currentPriority;
	    }
	}
  
	private GrammarSymbol lhs = null;

	/** update the lhs symbol of a production */
	private void updateLhs(GrammarSymbol lhs) {
		this.lhs = lhs;
    }
  
	private GrammarSymbol getKnownSymbol(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		GrammarSymbol sym = getGrammar().getSymbol(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("Symbol \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  
	private Terminal getKnownTerminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		Terminal sym = getGrammar().getTerminal(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("Terminal \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  
	private NonTerminal getKnownNonTerminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		NonTerminal sym = getGrammar().getNonTerminal(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("Non terminal \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
    
	private State getKnownState(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		State sym = getGrammar().getState(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("State \"" + id + "\" has not been declared", location);
		}
		return sym;
	}



  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= grammar EOF 
          case 0:
            {
              Object RESULT;
RESULT = null;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$START, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // associativity_decl ::= LEFT 
          case 1:
            {
  updatePrecedence(Associativity.LEFT);  
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.associativity_decl, CUP$sym, CUP$sym);
            }

          // associativity_decl ::= RIGHT 
          case 2:
            {
  updatePrecedence(Associativity.RIGHT);  
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.associativity_decl, CUP$sym, CUP$sym);
            }

          // associativity_decl ::= NONASSOC 
          case 3:
            {
  updatePrecedence(Associativity.NONE);  
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.associativity_decl, CUP$sym, CUP$sym);
            }

          // custom_code_spec ::= key_code CODE_STRING 
          case 4:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol key$ = CUP$stack.get(CUP$size - 2);
              Directive key = (Directive) key$.value;
 
								if ( ! getDirectives().setDirective(key, code)) {
									ErrorManager.getManager().emit_warning("Redundant " + key + " (skipping)");
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.custom_code_spec, key$, code$);
            }

          // expect_spec ::= EXPECT robust_id 
          case 5:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
 
								if ( ! getDirectives().setDirective(Directive.EXPECT, val)) {
									ErrorManager.getManager().emit_warning("Redundant expect (skipping)");
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expect_spec, CUP$stack.get(CUP$size - 2), val$);
            }

          // key_code ::= PARSER ACTION CODE 
          case 6:
            {
              Directive RESULT;
  RESULT = Directive.PARSER_ACTION_CODE;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER IMPORT CODE 
          case 7:
            {
              Directive RESULT;
  RESULT = Directive.PARSER_IMPORT_CODE;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER CODE 
          case 8:
            {
              Directive RESULT;
  RESULT = Directive.PARSER_CODE;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER INIT WITH 
          case 9:
            {
              Directive RESULT;
  RESULT = Directive.PARSER_INIT_CODE;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER AFTER REDUCE 
          case 10:
            {
              Directive RESULT;
  RESULT = Directive.PARSER_AFTER_REDUCE_CODE;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= SCANNER IMPORT CODE 
          case 11:
            {
              Directive RESULT;
  RESULT = Directive.SCANNER_IMPORT_CODE;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= SCANNER CODE 
          case 12:
            {
              Directive RESULT;
  RESULT = Directive.SCANNER_CODE;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // label_id ::= __REGEXP_13__ robust_id 
          case 13:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol label$ = CUP$stack.get(CUP$size - 1);
              String label = (String) label$.value;
  RESULT = label;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.label_id, CUP$stack.get(CUP$size - 2), label$, RESULT);
            }

          // lhs_nonterminal ::= SYMBOL_NONTERMINAL 
          case 14:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;
  updateLhs(getKnownNonTerminal(lhs_id$, lhs_id));  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.lhs_nonterminal, lhs_id$, lhs_id$);
            }

          // lhs_state ::= SYMBOL_STATE 
          case 15:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;
  updateLhs(getKnownState(lhs_id$, lhs_id));  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.lhs_state, lhs_id$, lhs_id$);
            }

          // $parenthesis2 ::= __REGEXP_5__ SYMBOL_TERMINAL 
          case 16:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis2, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // lhs_terminal ::= SYMBOL_TERMINAL $parenthesis2$0_many 
          case 17:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 2);
              String lhs_id = (String) lhs_id$.value;
  updateLhs(getKnownTerminal(lhs_id$, lhs_id));  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.lhs_terminal, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // multipart_id ::= robust_id 
          case 18:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              String id = (String) id$.value;
  RESULT = new StringBuilder(id);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.multipart_id, id$, id$, RESULT);
            }

          // multipart_id ::= multipart_id __REGEXP_14__ robust_id 
          case 19:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              String id = (String) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
  RESULT = list.append('.').append(id);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.multipart_id, list$, id$, RESULT);
            }

          // new_symbol_id ::= symbol_id 
          case 20:
            {
              com.github.jhoenicke.javacup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
  
								if (getGrammar().getSymbol(sym_id) != null) {
									ErrorManager.getManager().emit_error("Symbol \"" + sym_id + "\" has already been declared", sym_id$);
								} else {
									GrammarSymbol symbol = getFactory().createSymbol(currentKind, sym_id, currentType);
									if (symbol == null) {
										ErrorManager.getManager().emit_error("Symbol \"" + sym_id + "\" is not declared", sym_id$);
									} else {
										getGrammar().addUniqueSymbol(symbol);
									}
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.new_symbol_id, sym_id$, sym_id$);
            }

          // option_ ::= robust_id 
          case 21:
            {
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;
 
								if ( ! getDirectives().addDirective(Directive.OPTION, opt, null)) {
									ErrorManager.getManager().emit_warning("Redundant option " + opt + " (skipping)");
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_, opt$, opt$);
            }

          // option_ ::= robust_id __REGEXP_3__ robust_id 
          case 22:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;
 
								if ( ! getDirectives().addDirective(Directive.OPTION, opt, val)) {
									ErrorManager.getManager().emit_warning("Redundant option " + opt + " = " + val + " (skipping)");
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_, opt$, val$);
            }

          // $parenthesis3 ::= __REGEXP_2__ option_ 
          case 23:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis3, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_ $parenthesis3$0_many 
          case 24:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // option_spec ::= OPTION option_list 
          case 25:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_spec, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= PACKAGE multipart_id 
          case 26:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 
								if ( ! getDirectives().setDirective(Directive.PACKAGE_NAME, id.toString())) {
									ErrorManager.getManager().emit_warning("Redundant package name (skipping)");
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.package_spec, CUP$stack.get(CUP$size - 2), id$);
            }

          // parser_spec ::= PARSER multipart_id 
          case 27:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              StringBuilder name = (StringBuilder) name$.value;
 
								if ( ! getDirectives().setDirective(Directive.PARSER_NAME, name.toString())) {
									ErrorManager.getManager().emit_warning("Redundant parser name (skipping)");
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.parser_spec, CUP$stack.get(CUP$size - 2), name$);
            }

          // $parenthesis4 ::= __REGEXP_2__ precterminal_id 
          case 28:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis4, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // precedence_list ::= precterminal_id $parenthesis4$0_many 
          case 29:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precedence_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // precedence_spec ::= PRECEDENCE associativity_decl precedence_list 
          case 30:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precedence_spec, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_id ::= symbol_id 
          case 31:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;
 
								Terminal symbol = getKnownTerminal(name$, name);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Symbol \"" + name + "\" is not declared and cannot be used for precedence", name$);
								} else {
									symbol.setPrecedence(currentPriority, currentAssociativity);
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precterminal_id, name$, name$);
            }

          // precterminal_id ::= REGEXP 
          case 32:
            {
              com.github.jhoenicke.javacup.runtime.Symbol content$ = CUP$stack.get(CUP$size - 1);
              String content = (String) content$.value;
 
								RegExp symbol = getGrammar().getOrAddRegexp(content);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Regexp \"" + content + "\" cannot be declared for precedence", content$);
								} else {
									symbol.setPrecedence(currentPriority, currentAssociativity);
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precterminal_id, content$, content$);
            }

          // prod_part ::= wild_symbol_id label_id$0_1 
          case 33:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol label$ = CUP$stack.get(CUP$size - 1);
              String label = (String) label$.value;
              com.github.jhoenicke.javacup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 2);
              ProductionPart symb = (ProductionPart) symb$.value;
  RESULT = getFactory().createSimplePart(symb, label);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part, symb$, label$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 34:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
  RESULT = getFactory().createActionPart(code);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part, code$, code$, RESULT);
            }

          // prod_precedence ::= __REGEXP_7__ symbol_id 
          case 35:
            {
              Terminal RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
  RESULT = getKnownTerminal(term$, term);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_precedence, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // production_spec ::= lhs_nonterminal __REGEXP_4__ rhs_nonterminal_list 
          // production_spec ::= lhs_terminal __REGEXP_4__ rhs_terminal_list 
          // production_spec ::= lhs_state __REGEXP_4__ rhs_state_list 
          case 36:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.production_spec, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // rhs_nonterminal ::= prod_part$0_many prod_precedence$0_1 
          case 37:
            {
              com.github.jhoenicke.javacup.runtime.Symbol precedence$ = CUP$stack.get(CUP$size - 1);
              Terminal precedence = (Terminal) precedence$.value;
              com.github.jhoenicke.javacup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              java.util.List<ProductionPart> rhs = (java.util.List<ProductionPart>) rhs$.value;
 
								Production production = getFactory().createNonTerminalProduction(lhs, rhs, precedence);
								getGrammar().addProduction(production);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_nonterminal, rhs$, precedence$);
            }

          // $parenthesis5 ::= __REGEXP_5__ rhs_nonterminal 
          case 38:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis5, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_nonterminal_list ::= rhs_nonterminal $parenthesis5$0_many 
          case 39:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_nonterminal_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_state ::= REGEXP __REGEXP_6__ REGEXP CODE_STRING$0_1 
          case 40:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;
 
								Production enter = getFactory().createEnterStateStateProduction(lhs, from, null);
								getGrammar().addProduction(enter);
								Production leave = getFactory().createLeaveStateStateProduction(lhs, to, code);
								getGrammar().addProduction(leave);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_state, from$, code$);
            }

          // rhs_state ::= SYMBOL_STATE REGEXP __REGEXP_6__ REGEXP CODE_STRING$0_1 
          case 41:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;
              com.github.jhoenicke.javacup.runtime.Symbol in$ = CUP$stack.get(CUP$size - 5);
              String in = (String) in$.value;
 
								Production enter = getFactory().createEnterStateStateProduction(lhs, in, from, null);
								getGrammar().addProduction(enter);
								Production leave = getFactory().createLeaveStateStateProduction(lhs, to, code);
								getGrammar().addProduction(leave);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_state, in$, code$);
            }

          // $parenthesis6 ::= __REGEXP_5__ rhs_state 
          case 42:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis6, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_state_list ::= rhs_state $parenthesis6$0_many 
          case 43:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_state_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_terminal ::= REGEXP CODE_STRING$0_1 
          case 44:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 2);
              String regexp = (String) regexp$.value;
 
								Production production = getFactory().createSimpleTerminalProduction(lhs, regexp, code);
								getGrammar().addProduction(production);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, regexp$, code$);
            }

          // rhs_terminal ::= REGEXP __REGEXP_6__ REGEXP CODE_STRING$0_1 
          case 45:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;
 
								Production enter = getFactory().createEnterStateTerminalProduction(lhs, from, null);
								getGrammar().addProduction(enter);
								Production in = getFactory().createInStateTerminalProduction(lhs, null);
								getGrammar().addProduction(in);
								Production leave = getFactory().createLeaveStateTerminalProduction(lhs, to, code);
								getGrammar().addProduction(leave);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, from$, code$);
            }

          // rhs_terminal ::= REGEXP __REGEXP_6__ SYMBOL_STATE CODE_STRING$0_1 
          case 46:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol state$ = CUP$stack.get(CUP$size - 2);
              String state = (String) state$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;
 
								Production production = getFactory().createEnterStateTerminalProduction(lhs, from, state, code);
								getGrammar().addProduction(production);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, from$, code$);
            }

          // rhs_terminal ::= SYMBOL_STATE REGEXP CODE_STRING$0_1 
          case 47:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 2);
              String regexp = (String) regexp$.value;
              com.github.jhoenicke.javacup.runtime.Symbol state$ = CUP$stack.get(CUP$size - 3);
              String state = (String) state$.value;
 
								Production production = getFactory().createInStateTerminalProduction(lhs, state, regexp, code);
								getGrammar().addProduction(production);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, state$, code$);
            }

          // rhs_terminal ::= SYMBOL_STATE __REGEXP_6__ REGEXP CODE_STRING$0_1 
          case 48:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 2);
              String regexp = (String) regexp$.value;
              com.github.jhoenicke.javacup.runtime.Symbol in$ = CUP$stack.get(CUP$size - 4);
              String in = (String) in$.value;
 
								Production production = getFactory().createLeaveStateTerminalProduction(lhs, in, regexp, code);
								getGrammar().addProduction(production);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, in$, code$);
            }

          // rhs_terminal ::= SYMBOL_STATE __REGEXP_6__ REGEXP SYMBOL_STATE CODE_STRING$0_1 
          case 49:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 3);
              String regexp = (String) regexp$.value;
              com.github.jhoenicke.javacup.runtime.Symbol in$ = CUP$stack.get(CUP$size - 5);
              String in = (String) in$.value;
 
								Production production = getFactory().createEnterStateTerminalProduction(lhs, in, regexp, to, code);
								getGrammar().addProduction(production);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, in$, code$);
            }

          // $parenthesis7 ::= __REGEXP_5__ rhs_terminal 
          case 50:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis7, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_terminal_list ::= rhs_terminal $parenthesis7$0_many 
          case 51:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // robust_id ::= error 
          case 52:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = CUP$stack.get(CUP$size - 1);
 
								ErrorManager.getManager().emit_error("Illegal use of reserved word", e$);
								RESULT="ILLEGAL";
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.robust_id, e$, e$, RESULT);
            }

          // spec ::= package_spec __REGEXP_1__ 
          // spec ::= option_spec __REGEXP_1__ 
          // spec ::= parser_spec __REGEXP_1__ 
          // spec ::= symbol_spec __REGEXP_1__ 
          // spec ::= precedence_spec __REGEXP_1__ 
          // spec ::= expect_spec __REGEXP_1__ 
          // spec ::= start_spec __REGEXP_1__ 
          // spec ::= production_spec __REGEXP_1__ 
          // spec ::= error __REGEXP_1__ 
          case 53:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.spec, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // start_spec ::= START WITH symbol_id 
          case 54:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;
 
								NonTerminal symbol = getKnownNonTerminal(name$, name);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Symbol \"" + name + "\" is not declared for start symbol", name$);
								} else {
									getGrammar().setStartSymbol(symbol); 
								}
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.start_spec, CUP$stack.get(CUP$size - 3), name$);
            }

          // symbol_decl ::= symbol_kind symbol_type 
          case 55:
            {
              com.github.jhoenicke.javacup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol kind$ = CUP$stack.get(CUP$size - 2);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_decl, kind$, type$);
            }

          // symbol_kind ::= TERMINAL 
          case 56:
            {
  currentKind = SymbolKind.TERMINAL;  
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_kind, CUP$sym, CUP$sym);
            }

          // symbol_kind ::= NONTERMINAL 
          case 57:
            {
  currentKind = SymbolKind.NONTERMINAL;  
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_kind, CUP$sym, CUP$sym);
            }

          // symbol_kind ::= STATE 
          case 58:
            {
  currentKind = SymbolKind.STATE;  
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_kind, CUP$sym, CUP$sym);
            }

          // $parenthesis8 ::= __REGEXP_2__ new_symbol_id 
          case 59:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis8, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol_list ::= new_symbol_id $parenthesis8$0_many 
          case 60:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol_spec ::= symbol_decl symbol_list 
          case 61:
            {
  currentType = null;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_spec, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol_type ::= type_id 
          case 62:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
  currentType = id.toString();  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_type, id$, id$);
            }

          // type_id ::= multipart_id 
          case 63:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
  RESULT = id;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type_id, id$, id$, RESULT);
            }

          // type_id ::= type_id __REGEXP_15__ __REGEXP_16__ 
          case 64:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
  RESULT = id.append("[]");  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type_id, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id __REGEXP_17__ typearglist __REGEXP_18__ 
          case 65:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
  RESULT = id.append('<').append(types).append('>');  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type_id, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typeargument 
          case 66:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              StringBuilder type = (StringBuilder) type$.value;
  RESULT = type;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typearglist, type$, type$, RESULT);
            }

          // typearglist ::= typearglist __REGEXP_2__ typeargument 
          case 67:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              com.github.jhoenicke.javacup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
  RESULT = list.append(",").append(arg);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typearglist, list$, arg$, RESULT);
            }

          // typeargument ::= type_id 
          case 68:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              StringBuilder type = (StringBuilder) type$.value;
  RESULT = type;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typeargument, type$, type$, RESULT);
            }

          // typeargument ::= wildcard 
          case 69:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              StringBuilder name = (StringBuilder) name$.value;
  RESULT = name;  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typeargument, name$, name$, RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id __REGEXP_8__ 
          case 70:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              ProductionPart child = (ProductionPart) child$.value;
  RESULT = getFactory().createMany0Part(child);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id __REGEXP_9__ 
          case 71:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              ProductionPart child = (ProductionPart) child$.value;
  RESULT = getFactory().createMany1Part(child);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id __REGEXP_10__ 
          case 72:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              ProductionPart child = (ProductionPart) child$.value;
  RESULT = getFactory().createOptionalPart(child);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= symbol_id 
          case 73:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 1);
              String symid = (String) symid$.value;
  RESULT = getFactory().createSymbolPart(getKnownSymbol(symid$, symid));  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, symid$, symid$, RESULT);
            }

          // wild_symbol_id ::= REGEXP 
          case 74:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol content$ = CUP$stack.get(CUP$size - 1);
              String content = (String) content$.value;
 
								RegExp symbol = getGrammar().getOrAddRegexp(content);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Regexp \"" + content + "\" cannot be used ", content$);
								}
								RESULT = getFactory().createSymbolPart(symbol);
							 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, content$, content$, RESULT);
            }

          // wild_symbol_id ::= __REGEXP_11__ prod_part$1_many __REGEXP_12__ 
          case 75:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol prod$ = CUP$stack.get(CUP$size - 2);
              java.util.List<ProductionPart> prod = (java.util.List<ProductionPart>) prod$.value;
  RESULT = getFactory().createGroupPart(prod);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wildcard ::= __REGEXP_10__ 
          case 76:
            {
              StringBuilder RESULT;
  RESULT = new StringBuilder("?");  
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wildcard, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 77:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
  RESULT = w.append(" extends ").append(id);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wildcard, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 78:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
  RESULT = w.append(" super ").append(id);  
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wildcard, w$, id$, RESULT);
            }

          // CODE_STRING$0_1 ::= 
          case 79:
            {
              String RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.CODE_STRING$0_1, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part$0_many ::= 
          case 80:
            {
              java.util.ArrayList<ProductionPart> RESULT = new java.util.ArrayList<ProductionPart>();
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$0_many, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part$0_many ::= prod_part$0_many prod_part 
          case 81:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<ProductionPart> RESULT = (java.util.ArrayList<ProductionPart>) CUP$0.value;
              RESULT.add((ProductionPart) CUP$1.value);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$0_many, CUP$0, CUP$1, RESULT);
            }

          // prod_part$1_many ::= prod_part 
          case 82:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<ProductionPart> RESULT = new java.util.ArrayList<ProductionPart>();
              RESULT.add((ProductionPart) CUP$0.value);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$1_many, CUP$0, CUP$0, RESULT);
            }

          // prod_part$1_many ::= prod_part$1_many prod_part 
          case 83:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<ProductionPart> RESULT = (java.util.ArrayList<ProductionPart>) CUP$0.value;
              RESULT.add((ProductionPart) CUP$1.value);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$1_many, CUP$0, CUP$1, RESULT);
            }

          // label_id$0_1 ::= 
          case 84:
            {
              String RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.label_id$0_1, CUP$sym, CUP$sym, RESULT);
            }

          // prod_precedence$0_1 ::= 
          case 85:
            {
              Terminal RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_precedence$0_1, CUP$sym, CUP$sym, RESULT);
            }

          // $parenthesis1$0_many ::= 
          case 86:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis1$0_many ::= $parenthesis1$0_many $parenthesis1 
          case 87:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis2$0_many ::= 
          case 88:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis2$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis2$0_many ::= $parenthesis2$0_many $parenthesis2 
          case 89:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis2$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis3$0_many ::= 
          case 90:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis3$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis3$0_many ::= $parenthesis3$0_many $parenthesis3 
          case 91:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis3$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis4$0_many ::= 
          case 92:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis4$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis4$0_many ::= $parenthesis4$0_many $parenthesis4 
          case 93:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis4$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis5$0_many ::= 
          case 94:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis5$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis5$0_many ::= $parenthesis5$0_many $parenthesis5 
          case 95:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis5$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis6$0_many ::= 
          case 96:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis6$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis6$0_many ::= $parenthesis6$0_many $parenthesis6 
          case 97:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis6$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis7$0_many ::= 
          case 98:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis7$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis7$0_many ::= $parenthesis7$0_many $parenthesis7 
          case 99:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis7$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis8$0_many ::= 
          case 100:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis8$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis8$0_many ::= $parenthesis8$0_many $parenthesis8 
          case 101:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis8$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
