/* 
  JCup Specifications for the JCupNFlex Language
  by Michel Hassenforder, Université de Haute Alsace
  28 September 2022

  This JavaCup specification is used to implement JCupNFlex itself.
  It specifies the parser for the JCupNFlex specification language.

  The rules are rooted in the JCup language
  The regexp rules for the Jcup Terminals are not defined as they are
  defined in a companion files processed by JFlex.
  Here the JFlex rules are still ion this file to combine all parts 
  of a getGrammar().
  
  Author(s)
	Michel Hassenforder, ENSISA, Université de Haute Alsace
	michel.hassenforder@uha.fr
	
  Revisions
    v1.0	First released version
*/

package fr.uha.hassenforder.jcupnflex.reader;

import fr.uha.hassenforder.jcupnflex.ErrorManager;
import fr.uha.hassenforder.jcupnflex.model.Associativity;
import fr.uha.hassenforder.jcupnflex.model.Directive;
import fr.uha.hassenforder.jcupnflex.model.DirectiveSet;
import fr.uha.hassenforder.jcupnflex.model.IFactory;
import fr.uha.hassenforder.jcupnflex.model.Grammar;
import fr.uha.hassenforder.jcupnflex.model.GrammarSymbol;
import fr.uha.hassenforder.jcupnflex.model.NonTerminal;
import fr.uha.hassenforder.jcupnflex.model.Production;
import fr.uha.hassenforder.jcupnflex.model.ProductionPart;
import fr.uha.hassenforder.jcupnflex.model.RegExp;
import fr.uha.hassenforder.jcupnflex.model.SymbolKind;
import fr.uha.hassenforder.jcupnflex.model.Terminal;

parser code {:

/** global variables to store the grammar the directivess and a factory to build various concepts */
	private IFactory factory;
	private Grammar grammar;
	private DirectiveSet directives;

    public void setGrammar(Grammar  grammar) {
        this.grammar = grammar;
    }
    
    public void setFactory(IFactory factory) {
        this.factory = factory;
    }
    
    public void setDirectiveSet(DirectiveSet directives) {
        this.directives = directives;
    }
    
:}

action code {:

    private Grammar getGrammar() {
        return parser.grammar;
    }
    
    public IFactory getFactory() {
        return parser.factory;
    }
    
    public DirectiveSet getDirectives() {
        return parser.directives;
    }
    
	/** current kind of symbol to declare */
	private SymbolKind currentKind;
	/** current type of symbol to declare */
	private String currentType;

	/** Current precedence priority */
	private int currentPriority = 0;
	/** Current precedence associativity */
	private Associativity currentAssociativity = Associativity.NO;

	/** update the precedences we are declaring */
	private void updatePrecedence(Associativity associativity) {
		this.currentAssociativity = associativity;
		if (associativity != Associativity.NO) {
			++this.currentPriority;
	    }
	}
  
	private GrammarSymbol lhs = null;

	/** update the lhs symbol of a production */
	private void updateLhs(GrammarSymbol lhs) {
		this.lhs = lhs;
    }
  
	private GrammarSymbol getKnownSymbol(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		GrammarSymbol sym = getGrammar().getSymbol(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("Symbol \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  
	private Terminal getKnownTerminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		Terminal sym = getGrammar().getTerminal(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("Terminal \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  
	private NonTerminal getKnownNonTerminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		NonTerminal sym = getGrammar().getNonTerminal(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("Non terminal \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
    
:};

// Grammar lexic
terminal				SEMICOLON, COMMA, COLON, COLON_COLON_EQUALS, BAR, PERCENT_PREC;
// Directive lexic
terminal				DOT, LBRACK, RBRACK, GT, LT;
// EBNF operators
terminal				STAR, PLUS, QUESTION, EQUALS, LPARENT, RPARENT;
// REGEXP with region description from ~ to
terminal				TILDA;

terminal String			PACKAGE, IMPORT, CODE, ACTION, PARSER, TERMINAL, NONTERMINAL, INIT, 
						SCANNER, WITH, START, PRECEDENCE, LEFT, RIGHT, NONASSOC, SUPER, EXTENDS, 
						AFTER, REDUCE, OPTION, EXPECT;

terminal String			ID, CODE_STRING;

terminal String			SYMBOL_TERMINAL;
terminal String			SYMBOL_NONTERMINAL;

terminal String			REGEXP;

nonterminal					spec;
nonterminal					package_spec;
nonterminal 				parser_spec;
nonterminal 				option_spec, option_list, option_;
nonterminal 				custom_code_spec;
nonterminal 				symbol_spec, symbol_decl, symbol_kind, symbol_type, symbol_list, new_symbol_id;
nonterminal 				precedence_spec, precedence_list, precterminal_id, associativity_decl;
nonterminal 				expect_spec;
nonterminal 				start_spec;
nonterminal 				production_spec;
nonterminal					lhs_nonterminal, rhs_nt_list, rhs_nt;
nonterminal					lhs_terminal, rhs_t_list, rhs_t;

nonterminal ProductionPart	wild_symbol_id;

nonterminal 				grammar;

nonterminal Directive		key_code;

nonterminal String  		symbol_id, label_id, robust_id;
nonterminal StringBuilder	multipart_id, type_id, typearglist, typeargument, wildcard;

nonterminal ProductionPart	prod_part;
nonterminal Terminal		prod_precedence;

start with grammar;

grammar				::=	( spec ) *
					;

spec				::=	package_spec SEMICOLON
				    |	option_spec SEMICOLON
			    	|	parser_spec SEMICOLON
				    |	custom_code_spec
					|	symbol_spec SEMICOLON
					|	precedence_spec SEMICOLON
					|	expect_spec SEMICOLON
					|	start_spec SEMICOLON
					|	production_spec SEMICOLON
					|	error SEMICOLON
					;

package_spec		::=	PACKAGE	multipart_id:id
							{:
								if ( ! getDirectives().setDirective(Directive.PACKAGE_NAME, id.toString())) {
									ErrorManager.getManager().emit_warning("Redundant package name (skipping)");
								}
							:}
					;

parser_spec			::=	PARSER multipart_id:name
							{:
								if ( ! getDirectives().setDirective(Directive.PARSER_NAME, name.toString())) {
									ErrorManager.getManager().emit_warning("Redundant parser name (skipping)");
								}
							:}
					;

option_spec			::= OPTION option_list
					;

option_list			::=	option_ ( COMMA option_ ) *
					;

option_				::=	robust_id:opt
							{:
								if ( ! getDirectives().addDirective(Directive.OPTION, opt, null)) {
									ErrorManager.getManager().emit_warning("Redundant option " + opt + " (skipping)");
								}
							:}
					|	robust_id:opt EQUALS robust_id:val
							{:
								if ( ! getDirectives().addDirective(Directive.OPTION, opt, val)) {
									ErrorManager.getManager().emit_warning("Redundant option " + opt + " = " + val + " (skipping)");
								}
							:}
					;

custom_code_spec	::=	key_code:key CODE_STRING:code
							{:
								if ( ! getDirectives().setDirective(key, code)) {
									ErrorManager.getManager().emit_warning("Redundant " + key + " (skipping)");
								}
							:}
					;

key_code			::=	PARSER ACTION CODE					{: RESULT = Directive.PARSER_ACTION_CODE; :}
					|	PARSER IMPORT CODE					{: RESULT = Directive.PARSER_IMPORT_CODE; :}
					|	PARSER CODE							{: RESULT = Directive.PARSER_CODE; :}
					|	PARSER INIT WITH					{: RESULT = Directive.PARSER_INIT_CODE; :}
					|	PARSER AFTER REDUCE					{: RESULT = Directive.PARSER_AFTER_REDUCE_CODE; :}
					|	SCANNER IMPORT CODE					{: RESULT = Directive.SCANNER_IMPORT_CODE; :}
					|	SCANNER CODE						{: RESULT = Directive.SCANNER_CODE; :}
					;
					
symbol_spec			::= symbol_decl symbol_list				{: currentType = null; :}
					;

symbol_decl			::=	symbol_kind:kind symbol_type:type
					|	symbol_kind:kind
					;

symbol_kind			::=	TERMINAL 							{: currentKind = SymbolKind.TERMINAL; :}
					|	NONTERMINAL 						{: currentKind = SymbolKind.NONTERMINAL; :}
					;

symbol_type			::=	type_id:id 		 					{: currentType = id.toString(); :}
					;

symbol_list			::=	new_symbol_id ( COMMA new_symbol_id ) *
					;

new_symbol_id		::=	symbol_id:sym_id
							{: 
								if (getGrammar().getSymbol(sym_id) != null) {
									ErrorManager.getManager().emit_error("Symbol \"" + sym_id + "\" has already been declared", sym_id$);
								} else {
									GrammarSymbol symbol = getFactory().createSymbol(currentKind, sym_id, currentType);
									if (symbol == null) {
										ErrorManager.getManager().emit_error("Symbol \"" + sym_id + "\" is not declared", sym_id$);
									} else {
										getGrammar().addUniqueSymbol(symbol);
									}
								}
							:}
					;

precedence_spec		::= PRECEDENCE associativity_decl precedence_list
					;

associativity_decl	::= LEFT								{: updatePrecedence(Associativity.LEFT); :}
		        	|	RIGHT								{: updatePrecedence(Associativity.RIGHT); :}
					|	NONASSOC							{: updatePrecedence(Associativity.NONE); :}
					;
      
precedence_list		::= precterminal_id ( COMMA precterminal_id )*
					;

precterminal_id		::= symbol_id:name
							{:
								Terminal symbol = getKnownTerminal(name$, name);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Symbol \"" + name + "\" is not declared and cannot be used for precedence", name$);
								} else {
									symbol.setPrecedence(currentPriority, currentAssociativity);
								}
							:}
					|	REGEXP:content
							{:
								RegExp symbol = getGrammar().getOrAddRegexp(content);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Regexp \"" + content + "\" cannot be declared for precedence", content$);
								} else {
									symbol.setPrecedence(currentPriority, currentAssociativity);
								}
							:}
					;
	  
expect_spec			::=	EXPECT robust_id:val
							{:
								if ( ! getDirectives().setDirective(Directive.EXPECT, val)) {
									ErrorManager.getManager().emit_warning("Redundant expect (skipping)");
								}
							:}
					;

start_spec			::=	START WITH symbol_id:name 
							{:
								NonTerminal symbol = getKnownNonTerminal(name$, name);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Symbol \"" + name + "\" is not declared for start symbol", name$);
								} else {
									getGrammar().setStartSymbol(symbol); 
								}
							:}
					;

production_spec		::=	lhs_nonterminal COLON_COLON_EQUALS rhs_nt_list
					|	lhs_terminal COLON_COLON_EQUALS rhs_t_list
					;

lhs_nonterminal		::=	SYMBOL_NONTERMINAL:lhs_id {: updateLhs(getKnownNonTerminal(lhs_id$, lhs_id)); :} 
					;

lhs_terminal		::= SYMBOL_TERMINAL:lhs_id ( BAR SYMBOL_TERMINAL ) *	{: updateLhs(getKnownTerminal(lhs_id$, lhs_id)); :}
					;

rhs_nt_list			::=	rhs_nt ( BAR rhs_nt ) *
					;

rhs_nt				::=	prod_part*:rhs prod_precedence?:precedence 
							{:
								Production production = getFactory().createNonTerminalProduction(lhs, rhs, precedence);
								getGrammar().addProduction(production);
							:}
					;

rhs_t_list			::=	rhs_t ( BAR rhs_t ) *
					;

rhs_t				::=	REGEXP:regexp CODE_STRING?:code
							{:
								Production production = getFactory().createTerminalProduction(lhs, regexp, code);
								getGrammar().addProduction(production);
							:}
					|	REGEXP:from TILDA REGEXP:to CODE_STRING?:code
							{:
								Production production = getFactory().createTerminalProduction(lhs, from, to, code);
								getGrammar().addProduction(production);
							:}
					;

prod_precedence		::=	PERCENT_PREC symbol_id:term			{: RESULT = getKnownTerminal(term$, term); :}
					;

prod_part			::=	wild_symbol_id:symb label_id?:label	{: RESULT = getFactory().createSimplePart(symb, label); :}
					|	CODE_STRING:code					{: RESULT = getFactory().createActionPart(code); :}
					;

wild_symbol_id		::=	wild_symbol_id:child STAR			{: RESULT = getFactory().createMany0Part(child); :} 
					|	wild_symbol_id:child PLUS			{: RESULT = getFactory().createMany1Part(child); :} 
					|	wild_symbol_id:child QUESTION		{: RESULT = getFactory().createOptionalPart(child); :} 
					|	symbol_id:symid						{: RESULT = getFactory().createSymbolPart(getKnownSymbol(symid$, symid)); :}
					|	REGEXP:content
							{:
								RegExp symbol = getGrammar().getOrAddRegexp(content);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Regexp \"" + content + "\" cannot be used ", content$);
								}
								RESULT = getFactory().createSymbolPart(symbol);
							:}
					|	LPARENT prod_part+:prod RPARENT		{: RESULT = getFactory().createGroupPart(prod); :}
					;

label_id			::=	COLON robust_id:label				{: RESULT = label; :}
					;

multipart_id		::=	robust_id:id						{: RESULT = new StringBuilder(id); :}
					|	multipart_id:list DOT robust_id:id	{: RESULT = list.append('.').append(id); :}
					;

type_id				::= multipart_id:id						{: RESULT = id; :}
					|	type_id:id LBRACK RBRACK			{: RESULT = id.append("[]"); :}
					|	multipart_id:id LT typearglist:types GT	{: RESULT = id.append('<').append(types).append('>'); :}
					;

typearglist			::= typeargument:type					{: RESULT = type; :}
					|	typearglist:list COMMA typeargument:arg	{: RESULT = list.append(",").append(arg); :}
					;

typeargument		::=	type_id:type						{: RESULT = type; :}
					|	wildcard:name						{: RESULT = name; :}
					;

wildcard			::=	QUESTION							{: RESULT = new StringBuilder("?"); :}
					|	wildcard:w EXTENDS type_id:id		{: RESULT = w.append(" extends ").append(id); :}
     				|	wildcard:w SUPER type_id:id			{: RESULT = w.append(" super ").append(id); :}
					;

symbol_id			::=	ID
					|	SYMBOL_TERMINAL
					|	SYMBOL_NONTERMINAL
					|	OPTION
					|	SUPER
					|	EXTENDS
					|	CODE
					|	ACTION
					|	PARSER
					|	INIT
					|	SCANNER
					|	WITH
					|	LEFT
					|	RIGHT
					|	NONASSOC
					|	AFTER
					|	REDUCE
					;

robust_id			::=	ID
					|	SYMBOL_TERMINAL
					|	SYMBOL_NONTERMINAL
					|	OPTION
					|	CODE
					|	ACTION
					|	PARSER
					|	TERMINAL
					|	NONTERMINAL
					|	INIT
					|	SCANNER
					|	WITH
					|	START
					|	EXPECT
					|	PRECEDENCE
					|	LEFT
					|	RIGHT
					|	NONASSOC
					|	AFTER
					|	REDUCE
					|	error:e
							{:
								ErrorManager.getManager().emit_error("Illegal use of reserved word", e$);
								RESULT="ILLEGAL";
							:}
					;
