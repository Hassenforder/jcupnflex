// DO NOT EDIT
// Generated by JFlex 1.9.0-SNAPSHOT http://jflex.de/
// source: C:/Users/miche/eclipse-Workspaces/Compilation-Builder/fr.uha.hassenforder.jcupnflex/src/jcupnflex.flex

package fr.uha.hassenforder.jcupnflex.reader;
import fr.uha.hassenforder.jcupnflex.ErrorManager;
import fr.uha.hassenforder.jcupnflex.model.Grammar;


/* CUP jhoenicke imports */
import com.github.jhoenicke.javacup.runtime.Symbol;
import com.github.jhoenicke.javacup.runtime.AdvancedSymbolFactory;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("fallthrough")
public class Lexer implements com.github.jhoenicke.javacup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CODESEG = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\3\1\5\1\3\1\0\1\6\1\3\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\3\1\15\1\16"+
    "\12\0\1\17\1\20\1\21\1\22\1\23\1\24\1\3"+
    "\32\0\1\25\1\3\1\26\1\3\1\0\1\27\1\30"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\0\1\40\1\41\1\42\1\43\1\44\1\45\1\0"+
    "\1\46\1\47\1\50\1\51\1\0\1\52\1\53\2\0"+
    "\1\54\1\55\1\56\1\57\41\0\2\3\4\0\4\3"+
    "\1\0\2\3\1\0\7\3\1\0\4\3\1\0\5\3"+
    "\27\0\1\3\37\0\1\3\u01ca\0\4\3\14\0\16\3"+
    "\5\0\7\3\1\0\1\3\1\0\21\3\165\0\1\3"+
    "\2\0\2\3\4\0\1\3\1\0\6\3\1\0\1\3"+
    "\3\0\1\3\1\0\1\3\24\0\1\3\123\0\1\3"+
    "\213\0\1\3\5\0\2\3\246\0\1\3\46\0\2\3"+
    "\1\0\6\3\51\0\6\3\1\0\1\3\55\0\1\3"+
    "\1\0\1\3\2\0\1\3\2\0\1\3\1\0\10\3"+
    "\33\0\4\3\4\0\15\3\6\0\5\3\1\0\4\3"+
    "\13\0\1\3\1\0\3\3\112\0\4\3\146\0\1\3"+
    "\11\0\1\3\12\0\1\3\23\0\2\3\1\0\17\3"+
    "\74\0\2\3\145\0\16\3\66\0\4\3\1\0\2\3"+
    "\61\0\22\3\34\0\4\3\13\0\65\3\25\0\1\3"+
    "\22\0\13\3\221\0\2\3\12\0\1\3\23\0\1\3"+
    "\10\0\2\3\2\0\2\3\26\0\1\3\7\0\1\3"+
    "\1\0\3\3\4\0\2\3\11\0\2\3\2\0\2\3"+
    "\4\0\10\3\1\0\4\3\2\0\1\3\5\0\2\3"+
    "\16\0\7\3\2\0\1\3\1\0\2\3\3\0\1\3"+
    "\6\0\4\3\2\0\2\3\26\0\1\3\7\0\1\3"+
    "\2\0\1\3\2\0\1\3\2\0\2\3\1\0\1\3"+
    "\5\0\4\3\2\0\2\3\3\0\3\3\1\0\7\3"+
    "\4\0\1\3\1\0\7\3\20\0\13\3\3\0\1\3"+
    "\11\0\1\3\3\0\1\3\26\0\1\3\7\0\1\3"+
    "\2\0\1\3\5\0\2\3\12\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\0\17\3\4\0\2\3\12\0\1\3"+
    "\1\0\7\3\7\0\1\3\3\0\1\3\10\0\2\3"+
    "\2\0\2\3\26\0\1\3\7\0\1\3\2\0\1\3"+
    "\5\0\2\3\11\0\2\3\2\0\2\3\3\0\7\3"+
    "\3\0\4\3\2\0\1\3\5\0\2\3\12\0\1\3"+
    "\1\0\20\3\2\0\1\3\6\0\3\3\3\0\1\3"+
    "\4\0\3\3\2\0\1\3\1\0\1\3\2\0\3\3"+
    "\2\0\3\3\3\0\3\3\14\0\4\3\5\0\3\3"+
    "\3\0\1\3\4\0\2\3\1\0\6\3\1\0\16\3"+
    "\12\0\11\3\1\0\6\3\15\0\1\3\3\0\1\3"+
    "\27\0\1\3\20\0\3\3\10\0\1\3\3\0\1\3"+
    "\4\0\7\3\2\0\1\3\3\0\5\3\4\0\2\3"+
    "\12\0\20\3\4\0\1\3\10\0\1\3\3\0\1\3"+
    "\27\0\1\3\12\0\1\3\5\0\2\3\11\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\7\3\1\0\1\3"+
    "\4\0\2\3\12\0\1\3\2\0\15\3\15\0\1\3"+
    "\3\0\1\3\63\0\1\3\3\0\1\3\5\0\5\3"+
    "\4\0\7\3\5\0\2\3\12\0\12\3\6\0\1\3"+
    "\3\0\1\3\22\0\3\3\30\0\1\3\11\0\1\3"+
    "\1\0\2\3\7\0\3\3\1\0\4\3\6\0\1\3"+
    "\1\0\1\3\10\0\6\3\12\0\2\3\2\0\15\3"+
    "\72\0\4\3\20\0\1\3\12\0\47\3\2\0\1\3"+
    "\1\0\1\3\5\0\1\3\30\0\1\3\1\0\1\3"+
    "\27\0\2\3\5\0\1\3\1\0\1\3\6\0\2\3"+
    "\12\0\2\3\4\0\40\3\1\0\27\3\2\0\6\3"+
    "\12\0\13\3\1\0\1\3\1\0\1\3\1\0\4\3"+
    "\12\0\1\3\44\0\4\3\24\0\1\3\22\0\1\3"+
    "\44\0\11\3\1\0\71\3\112\0\6\3\116\0\2\3"+
    "\46\0\1\3\1\0\5\3\1\0\2\3\53\0\1\3"+
    "\115\0\1\3\4\0\2\3\7\0\1\3\1\0\1\3"+
    "\4\0\2\3\51\0\1\3\4\0\2\3\41\0\1\3"+
    "\4\0\2\3\7\0\1\3\1\0\1\3\4\0\2\3"+
    "\17\0\1\3\71\0\1\3\4\0\2\3\103\0\2\3"+
    "\3\0\40\3\20\0\20\3\126\0\2\3\6\0\3\3"+
    "\u016c\0\2\3\21\0\1\3\32\0\5\3\113\0\3\3"+
    "\13\0\7\3\15\0\1\3\7\0\13\3\25\0\13\3"+
    "\24\0\14\3\15\0\1\3\3\0\1\3\2\0\14\3"+
    "\124\0\3\3\1\0\3\3\3\0\2\3\12\0\41\3"+
    "\4\0\1\3\12\0\6\3\131\0\7\3\53\0\5\3"+
    "\106\0\12\3\37\0\1\3\14\0\4\3\14\0\12\3"+
    "\50\0\2\3\5\0\13\3\54\0\4\3\32\0\6\3"+
    "\12\0\46\3\34\0\4\3\77\0\1\3\35\0\2\3"+
    "\13\0\6\3\12\0\15\3\1\0\10\3\16\0\1\3"+
    "\2\0\77\3\114\0\4\3\12\0\21\3\11\0\14\3"+
    "\164\0\14\3\70\0\10\3\12\0\3\3\61\0\2\3"+
    "\11\0\7\3\53\0\2\3\3\0\20\3\3\0\1\3"+
    "\47\0\5\3\372\0\1\3\33\0\2\3\6\0\2\3"+
    "\46\0\2\3\6\0\2\3\10\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\37\0\2\3\65\0\1\3"+
    "\7\0\1\3\1\0\3\3\3\0\1\3\7\0\3\3"+
    "\4\0\2\3\6\0\4\3\15\0\5\3\3\0\1\3"+
    "\7\0\16\3\5\0\32\3\5\0\20\3\2\0\23\3"+
    "\1\0\13\3\5\0\1\3\12\0\1\3\1\0\15\3"+
    "\1\0\20\3\15\0\3\3\40\0\20\3\15\0\4\3"+
    "\1\0\3\3\14\0\21\3\1\0\4\3\1\0\2\3"+
    "\12\0\1\3\1\0\3\3\5\0\6\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\4\0\1\3\13\0\2\3"+
    "\4\0\5\3\5\0\4\3\1\0\21\3\51\0\u0177\3"+
    "\57\0\1\3\57\0\1\3\205\0\6\3\11\0\14\3"+
    "\46\0\1\3\1\0\5\3\1\0\2\3\70\0\7\3"+
    "\1\0\17\3\30\0\11\3\7\0\1\3\7\0\1\3"+
    "\7\0\1\3\7\0\1\3\7\0\1\3\7\0\1\3"+
    "\7\0\1\3\7\0\1\3\40\0\57\3\1\0\325\3"+
    "\3\0\31\3\17\0\1\3\5\0\2\3\5\0\4\3"+
    "\126\0\2\3\2\0\2\3\3\0\1\3\132\0\1\3"+
    "\4\0\5\3\53\0\1\3\136\0\21\3\40\0\60\3"+
    "\320\0\100\3\375\0\3\3\215\0\103\3\56\0\2\3"+
    "\15\0\3\3\34\0\24\3\60\0\4\3\12\0\1\3"+
    "\163\0\45\3\11\0\2\3\147\0\2\3\65\0\2\3"+
    "\11\0\52\3\63\0\4\3\1\0\13\3\1\0\7\3"+
    "\64\0\14\3\106\0\12\3\12\0\6\3\30\0\3\3"+
    "\1\0\1\3\61\0\2\3\44\0\14\3\35\0\3\3"+
    "\101\0\16\3\13\0\6\3\37\0\1\3\67\0\11\3"+
    "\16\0\2\3\12\0\6\3\27\0\3\3\111\0\30\3"+
    "\3\0\2\3\20\0\2\3\5\0\12\3\6\0\2\3"+
    "\6\0\2\3\6\0\11\3\7\0\1\3\7\0\1\3"+
    "\53\0\1\3\16\0\6\3\173\0\1\3\2\0\2\3"+
    "\12\0\6\3\244\0\14\3\27\0\4\3\61\0\4\3"+
    "\156\0\2\3\152\0\46\3\7\0\14\3\5\0\5\3"+
    "\14\0\1\3\15\0\1\3\5\0\1\3\1\0\1\3"+
    "\2\0\1\3\2\0\1\3\154\0\41\3\153\0\22\3"+
    "\100\0\2\3\66\0\50\3\15\0\3\3\20\0\20\3"+
    "\20\0\3\3\2\0\30\3\3\0\31\3\1\0\6\3"+
    "\5\0\1\3\207\0\2\3\1\0\4\3\1\0\13\3"+
    "\12\0\7\3\32\0\4\3\1\0\1\3\32\0\13\3"+
    "\131\0\3\3\6\0\2\3\6\0\2\3\6\0\2\3"+
    "\3\0\3\3\2\0\3\3\2\0\22\3\3\0\4\3"+
    "\14\0\1\3\32\0\1\3\23\0\1\3\2\0\1\3"+
    "\17\0\2\3\16\0\42\3\173\0\105\3\65\0\210\3"+
    "\1\0\202\3\35\0\3\3\61\0\17\3\1\0\37\3"+
    "\40\0\15\3\36\0\5\3\53\0\5\3\36\0\2\3"+
    "\44\0\4\3\10\0\1\3\5\0\52\3\236\0\2\3"+
    "\12\0\6\3\44\0\4\3\44\0\4\3\50\0\10\3"+
    "\64\0\234\3\67\0\11\3\26\0\12\3\10\0\230\3"+
    "\6\0\2\3\1\0\1\3\54\0\1\3\2\0\3\3"+
    "\1\0\2\3\27\0\12\3\27\0\11\3\37\0\101\3"+
    "\23\0\1\3\2\0\12\3\26\0\12\3\32\0\106\3"+
    "\70\0\6\3\2\0\100\3\4\0\1\3\2\0\5\3"+
    "\10\0\1\3\3\0\1\3\35\0\2\3\3\0\4\3"+
    "\1\0\40\3\35\0\3\3\35\0\43\3\10\0\1\3"+
    "\36\0\31\3\66\0\12\3\26\0\12\3\23\0\15\3"+
    "\22\0\156\3\111\0\67\3\63\0\15\3\63\0\15\3"+
    "\50\0\10\3\12\0\u0146\3\52\0\1\3\2\0\3\3"+
    "\2\0\116\3\35\0\12\3\1\0\10\3\41\0\137\3"+
    "\25\0\33\3\27\0\11\3\107\0\37\3\12\0\17\3"+
    "\74\0\2\3\1\0\17\3\1\0\2\3\31\0\7\3"+
    "\12\0\6\3\65\0\1\3\12\0\4\3\4\0\10\3"+
    "\44\0\2\3\1\0\11\3\105\0\4\3\4\0\1\3"+
    "\15\0\1\3\1\0\43\3\22\0\1\3\45\0\6\3"+
    "\1\0\101\3\7\0\1\3\1\0\1\3\4\0\1\3"+
    "\17\0\1\3\12\0\7\3\73\0\5\3\12\0\6\3"+
    "\4\0\1\3\10\0\2\3\2\0\2\3\26\0\1\3"+
    "\7\0\1\3\2\0\1\3\5\0\1\3\12\0\2\3"+
    "\2\0\2\3\3\0\2\3\1\0\6\3\1\0\5\3"+
    "\7\0\2\3\7\0\3\3\5\0\213\3\113\0\5\3"+
    "\12\0\4\3\4\0\36\3\106\0\1\3\1\0\10\3"+
    "\12\0\246\3\66\0\2\3\11\0\27\3\6\0\42\3"+
    "\101\0\3\3\1\0\13\3\12\0\46\3\71\0\7\3"+
    "\12\0\66\3\33\0\2\3\17\0\4\3\12\0\306\3"+
    "\73\0\145\3\112\0\25\3\10\0\2\3\1\0\2\3"+
    "\10\0\1\3\2\0\1\3\36\0\1\3\2\0\2\3"+
    "\11\0\14\3\12\0\106\3\10\0\2\3\56\0\2\3"+
    "\10\0\1\3\2\0\33\3\77\0\10\3\1\0\10\3"+
    "\112\0\3\3\1\0\42\3\71\0\7\3\11\0\1\3"+
    "\55\0\1\3\11\0\17\3\12\0\30\3\36\0\2\3"+
    "\26\0\1\3\16\0\111\3\7\0\1\3\2\0\1\3"+
    "\54\0\3\3\1\0\1\3\2\0\1\3\11\0\10\3"+
    "\12\0\6\3\6\0\1\3\2\0\1\3\45\0\1\3"+
    "\2\0\1\3\6\0\7\3\12\0\u0136\3\27\0\271\3"+
    "\1\0\54\3\4\0\37\3\232\0\146\3\157\0\21\3"+
    "\304\0\274\3\57\0\1\3\11\0\307\3\107\0\271\3"+
    "\71\0\7\3\37\0\1\3\12\0\146\3\36\0\2\3"+
    "\5\0\13\3\67\0\11\3\4\0\14\3\12\0\11\3"+
    "\25\0\5\3\23\0\260\3\100\0\200\3\113\0\4\3"+
    "\71\0\7\3\21\0\100\3\2\0\1\3\2\0\13\3"+
    "\2\0\16\3\370\0\10\3\326\0\52\3\11\0\367\3"+
    "\37\0\61\3\3\0\21\3\4\0\10\3\u018c\0\4\3"+
    "\153\0\5\3\15\0\3\3\11\0\7\3\12\0\3\3"+
    "\2\0\1\3\4\0\301\3\5\0\3\3\26\0\2\3"+
    "\7\0\36\3\4\0\224\3\3\0\273\3\125\0\1\3"+
    "\107\0\1\3\2\0\2\3\1\0\2\3\2\0\2\3"+
    "\4\0\1\3\14\0\1\3\1\0\1\3\7\0\1\3"+
    "\101\0\1\3\4\0\2\3\10\0\1\3\7\0\1\3"+
    "\34\0\1\3\4\0\1\3\5\0\1\3\1\0\3\3"+
    "\7\0\1\3\u0154\0\2\3\31\0\1\3\31\0\1\3"+
    "\37\0\1\3\31\0\1\3\37\0\1\3\31\0\1\3"+
    "\37\0\1\3\31\0\1\3\37\0\1\3\31\0\1\3"+
    "\10\0\2\3\151\0\4\3\62\0\10\3\1\0\16\3"+
    "\1\0\26\3\5\0\1\3\17\0\120\3\7\0\1\3"+
    "\21\0\2\3\7\0\1\3\2\0\1\3\5\0\325\3"+
    "\55\0\3\3\16\0\2\3\12\0\4\3\1\0\u0171\3"+
    "\72\0\5\3\306\0\13\3\7\0\51\3\114\0\4\3"+
    "\12\0\u0156\3\1\0\117\3\4\0\1\3\33\0\1\3"+
    "\2\0\1\3\1\0\2\3\1\0\1\3\12\0\1\3"+
    "\4\0\1\3\1\0\1\3\1\0\6\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\3\0\1\3"+
    "\2\0\1\3\1\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\0\1\3"+
    "\1\0\2\3\4\0\1\3\7\0\1\3\4\0\1\3"+
    "\4\0\1\3\1\0\1\3\12\0\1\3\21\0\5\3"+
    "\3\0\1\3\5\0\1\3\21\0\u0134\3\12\0\6\3"+
    "\336\0\42\3\65\0\13\3\336\0\2\3\u0182\0\16\3"+
    "\u0131\0\37\3\36\0\342\3\113\0\266\3\1\0\36\3"+
    "\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\2\3\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\3\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\3\14\1\1\3"+
    "\1\22\1\23\2\24\1\0\1\25\2\0\1\26\4\0"+
    "\1\27\22\1\1\30\1\31\2\0\1\32\24\1\1\0"+
    "\2\1\1\33\3\1\1\34\1\35\15\1\1\36\1\37"+
    "\1\1\1\40\12\1\1\41\1\1\1\42\1\43\1\44"+
    "\1\1\1\45\1\46\1\1\1\47\2\1\1\50\1\1"+
    "\1\51\1\1\1\52\2\1\1\53\2\1\1\54\1\1"+
    "\1\55\1\1\1\56\2\1\1\57\3\1\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\220\0\300\0\360\0\u0120"+
    "\0\u0150\0\220\0\220\0\220\0\220\0\220\0\220\0\u0180"+
    "\0\u01b0\0\220\0\220\0\220\0\220\0\220\0\220\0\220"+
    "\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330"+
    "\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\220\0\220"+
    "\0\220\0\u0480\0\360\0\u04b0\0\u04e0\0\u0150\0\u0510\0\u0540"+
    "\0\u0570\0\u05a0\0\u01e0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\220\0\220"+
    "\0\u0960\0\u0990\0\220\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80"+
    "\0\u0db0\0\u0de0\0\140\0\u0e10\0\u0e40\0\u0e70\0\140\0\140"+
    "\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0"+
    "\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\140\0\220\0\u1110"+
    "\0\140\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\u12c0\0\u12f0\0\140\0\u1320\0\140\0\140\0\140"+
    "\0\u1350\0\140\0\140\0\u1380\0\140\0\u13b0\0\u13e0\0\140"+
    "\0\u1410\0\140\0\u1440\0\140\0\u1470\0\u14a0\0\140\0\u14d0"+
    "\0\u1500\0\140\0\u1530\0\140\0\u1560\0\140\0\u1590\0\u15c0"+
    "\0\140\0\u15f0\0\u1620\0\u1650\0\140\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\3\1\34\3\3\1\35\1\3\1\36\1\3"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\3\1\45"+
    "\1\3\1\46\1\47\1\5\1\50\17\51\1\52\40\51"+
    "\1\3\27\0\24\3\66\0\1\4\55\0\5\53\1\54"+
    "\52\53\45\0\1\55\12\0\7\56\1\57\50\56\12\0"+
    "\1\60\3\0\1\61\60\0\1\62\40\0\27\63\1\64"+
    "\30\63\1\3\27\0\1\3\1\65\2\3\1\66\17\3"+
    "\4\0\1\3\27\0\14\3\1\67\7\3\4\0\1\3"+
    "\27\0\23\3\1\70\4\0\1\3\27\0\12\3\1\71"+
    "\1\72\10\3\4\0\1\3\27\0\3\3\1\73\20\3"+
    "\4\0\1\3\27\0\14\3\1\74\7\3\4\0\1\3"+
    "\27\0\15\3\1\75\6\3\4\0\1\3\27\0\1\76"+
    "\15\3\1\77\5\3\4\0\1\3\27\0\3\3\1\100"+
    "\3\3\1\101\14\3\4\0\1\3\27\0\1\3\1\102"+
    "\16\3\1\103\1\104\2\3\4\0\1\3\27\0\3\3"+
    "\1\105\20\3\4\0\1\3\27\0\7\3\1\106\14\3"+
    "\23\0\1\107\116\0\1\110\6\0\1\53\120\0\1\111"+
    "\20\0\1\56\50\0\12\60\1\112\45\60\2\61\1\4"+
    "\1\61\1\6\53\61\22\0\1\113\64\0\1\63\30\0"+
    "\1\3\27\0\20\3\1\114\3\3\4\0\1\3\27\0"+
    "\20\3\1\115\3\3\4\0\1\3\27\0\2\3\1\116"+
    "\21\3\4\0\1\3\27\0\15\3\1\117\2\3\1\120"+
    "\3\3\4\0\1\3\27\0\15\3\1\121\6\3\4\0"+
    "\1\3\27\0\7\3\1\122\14\3\4\0\1\3\27\0"+
    "\4\3\1\123\17\3\4\0\1\3\27\0\13\3\1\124"+
    "\10\3\4\0\1\3\27\0\20\3\1\125\3\3\4\0"+
    "\1\3\27\0\1\3\1\126\14\3\1\127\5\3\4\0"+
    "\1\3\27\0\3\3\1\130\20\3\4\0\1\3\27\0"+
    "\2\3\1\131\21\3\4\0\1\3\27\0\5\3\1\132"+
    "\16\3\4\0\1\3\27\0\1\133\23\3\4\0\1\3"+
    "\27\0\1\134\23\3\4\0\1\3\27\0\15\3\1\135"+
    "\6\3\4\0\1\3\27\0\16\3\1\136\5\3\4\0"+
    "\1\3\27\0\20\3\1\137\3\3\37\0\1\140\24\0"+
    "\12\60\1\112\3\60\1\4\41\60\1\3\27\0\7\3"+
    "\1\141\14\3\4\0\1\3\27\0\3\3\1\142\20\3"+
    "\4\0\1\3\27\0\3\3\1\143\20\3\4\0\1\3"+
    "\27\0\3\3\1\144\20\3\4\0\1\3\27\0\3\3"+
    "\1\145\20\3\4\0\1\3\27\0\14\3\1\146\7\3"+
    "\4\0\1\3\27\0\20\3\1\147\3\3\4\0\1\3"+
    "\27\0\20\3\1\150\3\3\4\0\1\3\27\0\1\151"+
    "\17\3\1\152\3\3\4\0\1\3\27\0\7\3\1\153"+
    "\14\3\4\0\1\3\27\0\10\3\1\154\13\3\4\0"+
    "\1\3\27\0\17\3\1\155\4\3\4\0\1\3\27\0"+
    "\1\3\1\156\22\3\4\0\1\3\27\0\21\3\1\157"+
    "\2\3\4\0\1\3\27\0\6\3\1\160\15\3\4\0"+
    "\1\3\27\0\13\3\1\161\10\3\4\0\1\3\27\0"+
    "\16\3\1\162\1\3\1\163\3\3\4\0\1\3\27\0"+
    "\3\3\1\164\20\3\4\0\1\3\27\0\12\3\1\165"+
    "\11\3\4\0\1\3\27\0\6\3\1\166\15\3\35\0"+
    "\1\167\26\0\1\3\27\0\14\3\1\170\7\3\4\0"+
    "\1\3\27\0\16\3\1\171\5\3\4\0\1\3\27\0"+
    "\1\3\1\172\22\3\4\0\1\3\27\0\13\3\1\173"+
    "\10\3\4\0\1\3\27\0\16\3\1\174\5\3\4\0"+
    "\1\3\27\0\17\3\1\175\4\3\4\0\1\3\27\0"+
    "\3\3\1\176\20\3\4\0\1\3\27\0\14\3\1\177"+
    "\7\3\4\0\1\3\27\0\1\200\23\3\4\0\1\3"+
    "\27\0\3\3\1\201\20\3\4\0\1\3\27\0\3\3"+
    "\1\202\20\3\4\0\1\3\27\0\1\3\1\203\22\3"+
    "\4\0\1\3\27\0\20\3\1\204\3\3\4\0\1\3"+
    "\27\0\13\3\1\205\10\3\4\0\1\3\27\0\20\3"+
    "\1\206\3\3\4\0\1\3\27\0\3\3\1\207\20\3"+
    "\4\0\1\3\27\0\16\3\1\210\5\3\4\0\1\3"+
    "\27\0\7\3\1\211\14\3\4\0\1\3\27\0\13\3"+
    "\1\212\10\3\4\0\1\3\27\0\20\3\1\213\3\3"+
    "\4\0\1\3\27\0\2\3\1\214\21\3\4\0\1\3"+
    "\27\0\20\3\1\215\3\3\4\0\1\3\27\0\17\3"+
    "\1\216\4\3\4\0\1\3\27\0\16\3\1\217\5\3"+
    "\4\0\1\3\27\0\13\3\1\220\10\3\4\0\1\3"+
    "\27\0\5\3\1\221\16\3\4\0\1\3\27\0\16\3"+
    "\1\222\5\3\4\0\1\3\27\0\2\3\1\223\21\3"+
    "\4\0\1\3\27\0\3\3\1\224\20\3\4\0\1\3"+
    "\27\0\3\3\1\225\20\3\4\0\1\3\27\0\13\3"+
    "\1\226\10\3\4\0\1\3\27\0\17\3\1\227\4\3"+
    "\4\0\1\3\27\0\14\3\1\230\7\3\4\0\1\3"+
    "\27\0\12\3\1\231\11\3\4\0\1\3\27\0\3\3"+
    "\1\232\20\3\4\0\1\3\27\0\3\3\1\233\20\3"+
    "\4\0\1\3\27\0\16\3\1\234\5\3\4\0\1\3"+
    "\27\0\1\235\23\3\4\0\1\3\27\0\1\3\1\236"+
    "\22\3\4\0\1\3\27\0\7\3\1\237\14\3\4\0"+
    "\1\3\27\0\13\3\1\240\10\3\4\0\1\3\27\0"+
    "\11\3\1\241\12\3\4\0\1\3\27\0\13\3\1\242"+
    "\10\3\4\0\1\3\27\0\1\3\1\243\22\3\4\0"+
    "\1\3\27\0\1\244\23\3\4\0\1\3\27\0\3\3"+
    "\1\245\20\3\4\0\1\3\27\0\11\3\1\246\12\3"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\2\11\4\1\6\11\2\1\7\11\16\1"+
    "\3\11\1\1\1\0\1\1\2\0\1\1\4\0\23\1"+
    "\2\11\2\0\1\11\24\1\1\0\26\1\1\11\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private Grammar grammar;
	
	public void setGrammar (Grammar grammar) {
	   this.grammar = grammar;
	}
<<<<<<< HEAD

=======
	
>>>>>>> refs/heads/regions
	// helpers to manage the whole code segment
	private StringBuilder cs;
    private int csline, cscolumn;

	// a simple function to remove the double quotes
	@SuppressWarnings("unused")
	private String regexpCleaner (char toEscape) {
		StringBuilder tmp = new StringBuilder ();
		int current = zzStartRead;
		while (current < zzMarkedPos) {
			tmp.append(zzBuffer[current]);
			if (zzBuffer[current] == toEscape && zzBuffer[current+1] == toEscape) {
				++current;
			}
			++current;
		}
		return tmp.toString();
	}
		
	@SuppressWarnings("unused")
    private Symbol symbol(ETerminal symbol, int fromLine, int fromColumn, int toLine, int toColumn, Object lexem)		{
       AdvancedSymbolFactory.Location left = new AdvancedSymbolFactory.Location (fromLine, fromColumn);
       AdvancedSymbolFactory.Location right = new AdvancedSymbolFactory.Location (toLine, toColumn);
       return symbolFactory.newSymbol(symbol, left, right, lexem);
    }

	@SuppressWarnings("unused")
    private void emit_warning(String message){
		ErrorManager.getManager().emit_warning("Scanner at " + (yyline+1) + "(" + (yycolumn+1) + "): " + message);
    }

	@SuppressWarnings("unused")
    private void emit_error(String message){
		ErrorManager.getManager().emit_error("Scanner at " + (yyline+1) + "(" + (yycolumn+1) +  "): " + message);
    }
    
    private ETerminal getToken (String name) {
		if (grammar.getTerminal(name) != null) return ETerminal.SYMBOL_TERMINAL;
		if (grammar.getNonTerminal(name) != null) return ETerminal.SYMBOL_NONTERMINAL;
		if (grammar.getState(name) != null) return ETerminal.SYMBOL_STATE;
		return ETerminal.ID;
	}



/* CUP jhoenicke code to ease symbol building with full location*/
  private AdvancedSymbolFactory symbolFactory;
  public void setAdvancedSymbolFactory (AdvancedSymbolFactory symbolFactory) {
     this.symbolFactory = symbolFactory;
  }
  private Symbol symbol(ETerminal symbol) {
     AdvancedSymbolFactory.Location left = new AdvancedSymbolFactory.Location (yyline+1,yycolumn+1-yylength());
     AdvancedSymbolFactory.Location right = new AdvancedSymbolFactory.Location (yyline+1,yycolumn+1);
	  return symbolFactory.newSymbol(symbol, left, right);
  }
  private Symbol symbol(ETerminal symbol, Object lexem)		{
     AdvancedSymbolFactory.Location left = new AdvancedSymbolFactory.Location (yyline+1,yycolumn+1);
     AdvancedSymbolFactory.Location right = new AdvancedSymbolFactory.Location (yyline+1,yycolumn+yylength());
     return symbolFactory.newSymbol(symbol, left, right, lexem);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return symbol(ETerminal.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(getToken(yytext()), yytext());
            }
            // fall through
          case 50: break;
          case 2:
            { 
            }
            // fall through
          case 51: break;
          case 3:
            { emit_warning("Unrecognized character '"+yytext()+"' -- ignored");
            }
            // fall through
          case 52: break;
          case 4:
            { return symbol(ETerminal.LPARENT);
            }
            // fall through
          case 53: break;
          case 5:
            { return symbol(ETerminal.RPARENT);
            }
            // fall through
          case 54: break;
          case 6:
            { return symbol(ETerminal.STAR);
            }
            // fall through
          case 55: break;
          case 7:
            { return symbol(ETerminal.PLUS);
            }
            // fall through
          case 56: break;
          case 8:
            { return symbol(ETerminal.COMMA);
            }
            // fall through
          case 57: break;
          case 9:
            { return symbol(ETerminal.DOT);
            }
            // fall through
          case 58: break;
          case 10:
            { return symbol(ETerminal.COLON);
            }
            // fall through
          case 59: break;
          case 11:
            { return symbol(ETerminal.SEMICOLON);
            }
            // fall through
          case 60: break;
          case 12:
            { return symbol(ETerminal.LT);
            }
            // fall through
          case 61: break;
          case 13:
            { return symbol(ETerminal.EQUALS);
            }
            // fall through
          case 62: break;
          case 14:
            { return symbol(ETerminal.GT);
            }
            // fall through
          case 63: break;
          case 15:
            { return symbol(ETerminal.QUESTION);
            }
            // fall through
          case 64: break;
          case 16:
            { return symbol(ETerminal.LBRACK);
            }
            // fall through
          case 65: break;
          case 17:
            { return symbol(ETerminal.RBRACK);
            }
            // fall through
          case 66: break;
          case 18:
            { return symbol(ETerminal.BAR);
            }
            // fall through
          case 67: break;
          case 19:
            { return symbol(ETerminal.TILDA);
            }
            // fall through
          case 68: break;
          case 20:
            { cs.append(yytext());
            }
            // fall through
          case 69: break;
          case 21:
            { return symbol(ETerminal.REGEXP, regexpCleaner('"'));
            }
            // fall through
          case 70: break;
          case 22:
            { return symbol(ETerminal.REGEXP, regexpCleaner('\''));
            }
            // fall through
          case 71: break;
          case 23:
            { return symbol(ETerminal.REGEXP, regexpCleaner('`'));
            }
            // fall through
          case 72: break;
          case 24:
            { cs = new StringBuilder(); csline=yyline; cscolumn=yycolumn; yybegin(CODESEG);
            }
            // fall through
          case 73: break;
          case 25:
            { yybegin(YYINITIAL); return symbol(ETerminal.CODE_STRING, csline+1, cscolumn+1, yyline+1, yycolumn+1, cs.toString());
            }
            // fall through
          case 74: break;
          case 26:
            { return symbol(ETerminal.COLON_COLON_EQUALS);
            }
            // fall through
          case 75: break;
          case 27:
            { return symbol(ETerminal.CODE, yytext());
            }
            // fall through
          case 76: break;
          case 28:
            { return symbol(ETerminal.INIT, yytext());
            }
            // fall through
          case 77: break;
          case 29:
            { return symbol(ETerminal.LEFT, yytext());
            }
            // fall through
          case 78: break;
          case 30:
            { return symbol(ETerminal.WITH, yytext());
            }
            // fall through
          case 79: break;
          case 31:
            { return symbol(ETerminal.PERCENT_PREC);
            }
            // fall through
          case 80: break;
          case 32:
            { return symbol(ETerminal.AFTER, yytext());
            }
            // fall through
          case 81: break;
          case 33:
            { return symbol(ETerminal.RIGHT, yytext());
            }
            // fall through
          case 82: break;
          case 34:
            { return symbol(ETerminal.START, yytext());
            }
            // fall through
          case 83: break;
          case 35:
            { return symbol(ETerminal.STATE, yytext());
            }
            // fall through
          case 84: break;
          case 36:
            { return symbol(ETerminal.SUPER, yytext());
            }
            // fall through
          case 85: break;
          case 37:
            { return symbol(ETerminal.ACTION, yytext());
            }
            // fall through
          case 86: break;
          case 38:
            { return symbol(ETerminal.EXPECT, yytext());
            }
            // fall through
          case 87: break;
          case 39:
            { return symbol(ETerminal.IMPORT, yytext());
            }
            // fall through
          case 88: break;
          case 40:
            { return symbol(ETerminal.OPTION, yytext());
            }
            // fall through
          case 89: break;
          case 41:
            { return symbol(ETerminal.PARSER, yytext());
            }
            // fall through
          case 90: break;
          case 42:
            { return symbol(ETerminal.REDUCE, yytext());
            }
            // fall through
          case 91: break;
          case 43:
            { return symbol(ETerminal.EXTENDS, yytext());
            }
            // fall through
          case 92: break;
          case 44:
            { return symbol(ETerminal.PACKAGE, yytext());
            }
            // fall through
          case 93: break;
          case 45:
            { return symbol(ETerminal.SCANNER, yytext());
            }
            // fall through
          case 94: break;
          case 46:
            { return symbol(ETerminal.NONASSOC, yytext());
            }
            // fall through
          case 95: break;
          case 47:
            { return symbol(ETerminal.TERMINAL, yytext());
            }
            // fall through
          case 96: break;
          case 48:
            { return symbol(ETerminal.PRECEDENCE, yytext());
            }
            // fall through
          case 97: break;
          case 49:
            { return symbol(ETerminal.NONTERMINAL, yytext());
            }
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
