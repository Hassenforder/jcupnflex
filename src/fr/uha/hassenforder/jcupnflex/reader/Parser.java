
//----------------------------------------------------
// The following code was generated by jh-javacup-1.3 20230621
// Tue Jul 11 11:20:44 GMT+01:00 2023
//----------------------------------------------------

package fr.uha.hassenforder.jcupnflex.reader;

import fr.uha.hassenforder.jcupnflex.ErrorManager;
import fr.uha.hassenforder.jcupnflex.model.Associativity;
import fr.uha.hassenforder.jcupnflex.model.Directive;
import fr.uha.hassenforder.jcupnflex.model.DirectiveSet;
import fr.uha.hassenforder.jcupnflex.model.IFactory;
import fr.uha.hassenforder.jcupnflex.model.Grammar;
import fr.uha.hassenforder.jcupnflex.model.GrammarSymbol;
import fr.uha.hassenforder.jcupnflex.model.NonTerminal;
import fr.uha.hassenforder.jcupnflex.model.Production;
import fr.uha.hassenforder.jcupnflex.model.ProductionPart;
import fr.uha.hassenforder.jcupnflex.model.RegExp;
import fr.uha.hassenforder.jcupnflex.model.State;
import fr.uha.hassenforder.jcupnflex.model.SymbolKind;
import fr.uha.hassenforder.jcupnflex.model.Terminal;

/** jh-javacup-1.3 20230621 generated parser.
  * @version Tue Jul 11 11:20:44 GMT+01:00 2023
  */
public class Parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\314\000\002\000\002\001\002\002\002\003\002" +
    "\055\002\004\002\005\001\005\003\006\002\037" +
    "\003\037\003\037\002\037\003\037\003\037\003" +
    "\037\002\007\002\010\002\011\001\011\001\011" +
    "\001\012\001\057\002\013\002\014\001\015\003" +
    "\020\001\020\001\020\001\061\002\016\002\017" +
    "\001\017\001\021\002\022\003\023\003\024\001" +
    "\063\002\027\002\032\001\065\002\025\002\026" +
    "\002\071\002\030\002\031\002\031\004\031\004" +
    "\031\003\031\004\031\005\074\002\033\002\034" +
    "\004\034\005\051\002\050\002\050\001\035\002" +
    "\035\002\035\002\035\001\035\001\035\003\041" +
    "\002\043\001\043\003\044\001\044\003\044\004" +
    "\045\001\045\003\046\001\046\001\047\001\047" +
    "\003\047\003\042\001\073\000\076\000\067\000" +
    "\067\002\077\001\077\002\070\000\054\000\054" +
    "\002\056\000\056\002\060\000\060\002\062\000" +
    "\062\002\064\000\064\002\066\000\066\002\072" +
    "\000\072\002\075\000\075\002\264\264\266\u046a" +
    "\264\u0354\u0422\u019a\264\264\264\u03d2\u040e\354\u03da" +
    "\u0392\u03ee\u03d2\u03b2\264\u0348\u0300\u02b8\u0250\u0efa\264" +
    "\u0228\u0206\u01ec\u01e0\u0396\u038a\u036a\u0438\264\u04c4\u0a82" +
    "\u01b2\u041c\u015c\u0270\u01fc\u011a\266\u0404\u0434\u0ec8\u0dfe" +
    "\u0dca\u0d96\u0d62\u0482\u01ba\u03b0\u01b6\u03ea\264\264\264" +
    "\264\u03ac\u0198\u03a8\u0adc\u0e96\u0b2c\u0c04\264\264\264" +
    "\264\u09cc\u03e8\u03e4\264\u034a\u042e\u042c\u042a\u0422\u03f6" +
    "\u0174\u03a4\u036c\u016e\u0368\u0302\u0364\u0438\u03e6\u0360\u0152" +
    "\u03d4\u016a\u0318\u0970\366\u0488\u0116\u0316\u044e\u03fe\332" +
    "\u030c\u0a28\u035c\u0326\u02ba\u0322\u03ae\u0e64\u031a\u0b48\u0164" +
    "\u01f2\u01aa\u0a9e\u0bc4\u02d4\u0e32\u0cfa\u0748\u085c\u06ec\u0690" +
    "\u0914\u02d2\u0448\320\u03e0\u02d0\u02ce\u03de\u043a\u02c4\u0d2e" +
    "\u02de\u0294\u024c\u010a\u0b78\u0272\u022a\u08b8\u028a\u0288\u0cbc" +
    "\u0c7e\u01e2\u0634\u05d8\u057c\u0800\274\u0286\316\314\u03dc" +
    "\u0284\u0438\312\u03a4\u0242\270\u01a2\u0a78\u09ec\u0240\u0520" +
    "\u0c40\u07a4\u023e\300\u023c\u01fa\u01f8\276\u01f6\u01b0\u0170" +
    "\u0128\u0f5c\256\000\000\000\000\000\000\050\052" +
    "\054\000\000\000\000\000\000\000\000\260\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\004\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\004\004\004\004\000\000\000\000\000" +
    "\000\000\004\004\004\004\000\000\000\024\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\030\105\003\002\001" +
    "\007\052\010\242\076\242\076\230\240\257\240" +
    "\253\240\052\225\230\240\257\240\253\240\237" +
    "\240\233\240\232\240\177\240\237\240\233\240" +
    "\232\240\177\240\145\112\030\175\030\175\030" +
    "\175\030\107\030\107\030\107\030\175\030\175" +
    "\030\175\030\107\030\107\030\175\030\175\030" +
    "\175\030\167\030\167\030\175\030\175\030\175" +
    "\030\107\030\175\212\105\030\175\030\175\030" +
    "\175\230\u0155\257\u0167\253\u0165\230\u0157\141\112" +
    "\137\375\051\206\237\u0161\233\u015b\232\u0159\177" +
    "\u0133\212\337\051\206\263\160\014\135\014\137" +
    "\014\141\263\160\212\107\212\107\212\107\212" +
    "\107\212\107\212\107\212\107\212\107\212\107" +
    "\212\107\212\107\212\107\212\107\212\107\132" +
    "\105\137\377\212\107\212\107\212\107\212\107" +
    "\212\107\046\206\212\107\212\107\212\107\051" +
    "\235\160\224\046\206\134\112\132\337\123\066" +
    "\262\150\160\267\120\110\160\224\262\150\132" +
    "\107\132\107\132\107\132\107\132\107\132\107" +
    "\132\107\132\107\132\107\132\107\132\107\132" +
    "\107\132\107\132\107\006\105\074\044\132\107" +
    "\132\107\132\107\132\107\132\107\243\222\132" +
    "\107\132\107\132\107\162\220\046\032\261\152" +
    "\044\006\243\222\065\106\261\152\063\012\162" +
    "\220\044\225\006\113\006\115\006\117\006\107" +
    "\006\107\006\107\006\107\006\121\006\107\006" +
    "\107\006\107\006\107\006\107\006\107\006\107" +
    "\223\105\034\213\006\123\006\107\006\107\006" +
    "\107\006\107\033\211\006\107\006\107\006\107" +
    "\161\u0115\260\156\256\132\255\140\050\206\260" +
    "\156\256\132\255\140\161\u0117\032\207\050\206" +
    "\223\u0153\223\u0153\223\u0153\223\u0153\223\u0153\223" +
    "\u0153\223\u0153\223\u0153\223\u0153\223\u0153\223\u0153" +
    "\223\u0153\223\u0153\223\u0153\215\105\031\205\223" +
    "\u0153\223\u0153\223\u0153\223\u0153\223\u0153\050\233" +
    "\223\u0153\223\u0153\223\u0153\254\142\252\146\246" +
    "\124\241\314\254\142\252\146\246\124\241\314" +
    "\211\060\211\060\026\165\215\107\215\107\215" +
    "\107\215\107\215\107\215\107\215\107\215\107" +
    "\215\107\215\107\215\107\215\107\215\107\215" +
    "\107\214\105\047\206\215\107\215\107\215\107" +
    "\215\107\215\107\047\206\215\107\215\107\215" +
    "\107\235\310\231\144\220\162\217\304\235\310" +
    "\231\144\220\162\217\304\210\014\210\014\047" +
    "\231\214\107\214\107\214\107\214\107\214\107" +
    "\214\107\214\107\214\107\214\107\214\107\214" +
    "\107\214\107\214\107\214\107\152\105\025\163" +
    "\214\107\214\107\214\107\214\107\214\107\205" +
    "\154\214\107\214\107\214\107\205\u0141\202\134" +
    "\201\136\175\130\165\126\202\u0139\201\136\175" +
    "\130\165\u011d\207\274\207\274\152\145\152\145" +
    "\152\145\152\145\152\145\152\145\152\145\152" +
    "\145\152\145\152\145\152\145\152\145\152\145" +
    "\152\145\125\105\024\161\152\145\152\145\152" +
    "\145\152\145\152\145\146\312\152\145\152\145" +
    "\152\145\146\312\142\306\135\302\156\270\156" +
    "\270\142\306\135\302\153\264\153\264\151\022" +
    "\151\022\125\323\125\323\125\323\125\323\125" +
    "\323\125\323\125\323\125\323\125\323\125\323" +
    "\125\323\125\323\125\323\125\323\112\105\023" +
    "\157\125\323\125\323\125\323\125\323\125\323" +
    "\004\103\125\323\125\323\125\323\150\100\150" +
    "\u010d\131\062\131\333\126\016\126\325\124\272" +
    "\124\272\122\104\122\104\037\221\112\317\112" +
    "\317\112\317\112\317\112\317\112\317\112\317" +
    "\112\317\112\317\112\317\112\317\112\317\112" +
    "\317\112\317\016\105\036\217\112\317\112\317" +
    "\112\317\112\317\112\317\035\215\112\317\112" +
    "\317\112\317\121\102\121\102\075\266\075\266" +
    "\073\064\073\064\064\262\064\262\154\116\154" +
    "\116\021\122\016\153\016\153\016\153\016\153" +
    "\016\153\016\153\016\153\016\153\016\153\016" +
    "\153\016\153\016\153\016\153\016\153\015\105" +
    "\020\114\016\153\016\153\016\153\016\153\016" +
    "\153\133\351\016\153\016\153\016\153\130\300" +
    "\130\300\066\120\066\257\017\276\017\276\012" +
    "\127\012\131\240\307\240\311\203\u013d\015\145" +
    "\015\145\015\145\015\145\015\145\015\145\015" +
    "\145\015\145\015\145\015\145\015\145\015\145" +
    "\015\145\015\145\005\105\144\u0109\015\145\015" +
    "\145\015\145\015\145\015\145\053\237\015\145" +
    "\015\145\015\145\234\277\234\301\200\u0135\200" +
    "\u0137\110\307\110\311\107\277\107\301\045\227" +
    "\013\133\117\040\005\107\005\107\005\107\005" +
    "\107\005\107\005\107\005\107\005\107\005\107" +
    "\005\107\005\107\005\107\005\107\005\107\002" +
    "\011\002\007\005\107\005\107\005\107\005\107" +
    "\005\107\116\036\005\107\005\107\005\107\115" +
    "\034\114\026\113\030\062\020\062\020\054\042" +
    "\140\240\040\223\127\331\002\013\140\240\236" +
    "\u015f\204\u013f\002\015\002\017\002\021\002\023" +
    "\062\253\002\025\176\u0131\002\027\002\031\143" +
    "\u0107\140\u0101\264\001\264\001\264\001\264\001" +
    "\264\001\002\033\002\035\264\001\264\001\002" +
    "\037\002\041\002\043\042\236\042\236\264\001" +
    "\264\001\042\236\042\236\042\236\042\236\264" +
    "\001\042\236\042\236\140\u0103\264\001\264\001" +
    "\042\236\042\236\042\236\264\001\264\001\264" +
    "\001\042\236\042\236\042\236\264\001\264\001" +
    "\264\001\042\236\042\236\042\236\264\001\264" +
    "\001\042\236\042\236\042\236\042\236\042\236" +
    "\042\236\042\236\042\236\264\001\042\236\042" +
    "\236\042\236\042\236\042\236\042\236\247\202" +
    "\264\001\247\202\264\001\247\202\247\202\264" +
    "\001\264\001\264\001\264\001\264\001\247\202" +
    "\247\202\247\202\264\001\247\202\247\202\264" +
    "\001\264\001\264\001\247\202\247\202\247\202" +
    "\264\001\264\001\264\001\247\202\247\202\247" +
    "\202\264\001\264\001\247\202\247\202\247\202" +
    "\247\202\247\202\247\202\247\202\247\202\264" +
    "\001\247\202\247\202\247\202\247\202\247\202" +
    "\247\202\226\174\264\001\226\174\264\001\226" +
    "\174\226\174\264\001\264\001\264\001\264\001" +
    "\264\001\226\174\226\174\226\174\264\001\226" +
    "\174\226\174\264\001\264\001\264\001\226\174" +
    "\226\174\226\174\264\001\264\001\264\001\226" +
    "\174\226\174\226\174\264\001\264\001\226\174" +
    "\226\174\226\174\226\174\226\174\226\174\226" +
    "\174\226\174\264\001\226\174\226\174\226\174" +
    "\226\174\226\174\226\174\225\172\264\001\225" +
    "\172\264\001\225\172\225\172\264\001\264\001" +
    "\264\001\264\001\264\001\225\172\225\172\225" +
    "\172\264\001\225\172\225\172\264\001\264\001" +
    "\264\001\225\172\225\172\225\172\264\001\264" +
    "\001\264\001\225\172\225\172\225\172\264\001" +
    "\264\001\225\172\225\172\225\172\225\172\225" +
    "\172\225\172\225\172\225\172\264\001\225\172" +
    "\225\172\225\172\225\172\225\172\225\172\224" +
    "\170\264\001\224\170\264\001\224\170\224\170" +
    "\264\001\264\001\264\001\264\001\264\001\224" +
    "\170\224\170\224\170\264\001\224\170\224\170" +
    "\264\001\264\001\264\001\224\170\224\170\224" +
    "\170\264\001\264\001\264\001\224\170\224\170" +
    "\224\170\264\001\264\001\224\170\224\170\224" +
    "\170\224\170\224\170\224\170\224\170\224\170" +
    "\264\001\224\170\224\170\224\170\224\170\224" +
    "\170\224\170\173\242\264\001\173\u0127\264\001" +
    "\173\242\173\242\264\001\264\001\264\001\264" +
    "\001\264\001\173\u0129\173\u012b\173\u012d\264\001" +
    "\173\242\173\242\264\001\264\001\264\001\173" +
    "\242\173\242\173\242\264\001\264\001\264\001" +
    "\173\242\173\242\173\242\264\001\264\001\173" +
    "\242\173\242\173\242\173\242\173\242\173\242" +
    "\173\242\173\242\264\001\173\242\173\242\173" +
    "\242\173\242\173\242\173\242\172\200\264\001" +
    "\172\200\264\001\172\200\172\200\264\001\264" +
    "\001\264\001\264\001\264\001\172\200\172\200" +
    "\172\200\264\001\172\200\172\200\264\001\264" +
    "\001\264\001\172\200\172\200\172\200\264\001" +
    "\264\001\264\001\172\200\172\200\172\200\264" +
    "\001\264\001\172\200\172\200\172\200\172\200" +
    "\172\200\172\200\172\200\172\200\264\001\172" +
    "\200\172\200\172\200\172\200\172\200\172\200" +
    "\170\176\264\001\170\176\264\001\170\176\170" +
    "\176\264\001\264\001\264\001\264\001\264\001" +
    "\170\176\170\176\170\176\264\001\170\176\170" +
    "\176\264\001\264\001\264\001\170\176\170\176" +
    "\170\176\264\001\264\001\264\001\170\176\170" +
    "\176\170\176\264\001\264\001\170\176\170\176" +
    "\170\176\170\176\170\176\170\176\170\176\170" +
    "\176\264\001\170\176\170\176\170\176\170\176" +
    "\170\176\170\176\251\204\264\001\264\001\264" +
    "\001\251\204\251\204\264\001\264\001\264\001" +
    "\264\001\264\001\264\001\264\001\264\001\264" +
    "\001\251\204\251\204\264\001\264\001\264\001" +
    "\251\204\251\204\251\204\264\001\264\001\264" +
    "\001\251\204\251\204\251\204\264\001\264\001" +
    "\251\204\251\204\251\204\251\204\251\204\251" +
    "\204\251\204\251\204\264\001\251\204\251\204" +
    "\251\204\251\204\251\204\251\204\227\164\264" +
    "\001\264\001\264\001\227\164\227\164\264\001" +
    "\264\001\264\001\264\001\264\001\264\001\264" +
    "\001\264\001\264\001\227\164\227\164\264\001" +
    "\264\001\264\001\227\164\227\164\227\164\264" +
    "\001\264\001\264\001\227\164\227\164\227\164" +
    "\264\001\264\001\227\164\227\164\227\164\227" +
    "\164\227\164\227\164\227\164\227\164\264\001" +
    "\227\164\227\164\227\164\227\164\227\164\227" +
    "\164\171\166\264\001\264\001\264\001\171\166" +
    "\171\166\264\001\264\001\264\001\264\001\264" +
    "\001\264\001\264\001\264\001\264\001\171\166" +
    "\171\166\264\001\264\001\264\001\171\166\171" +
    "\166\171\166\264\001\264\001\264\001\171\166" +
    "\171\166\171\166\264\001\264\001\171\166\171" +
    "\166\171\166\171\166\171\166\171\166\171\166" +
    "\171\166\264\001\171\166\171\166\171\166\171" +
    "\166\171\166\171\166\216\244\264\001\264\001" +
    "\264\001\216\244\216\244\264\001\264\001\264" +
    "\001\264\001\264\001\264\001\264\001\264\001" +
    "\264\001\216\244\264\001\264\001\264\001\264" +
    "\001\216\244\216\244\216\244\264\001\264\001" +
    "\264\001\216\244\216\244\216\244\264\001\264" +
    "\001\216\244\216\244\216\244\216\244\216\244" +
    "\216\244\216\244\216\244\264\001\216\244\216" +
    "\244\216\244\216\244\216\244\216\244\174\246" +
    "\264\001\264\001\264\001\174\246\174\246\264" +
    "\001\264\001\264\001\264\001\264\001\264\001" +
    "\264\001\264\001\264\001\174\246\264\001\264" +
    "\001\264\001\264\001\174\246\174\246\174\246" +
    "\264\001\264\001\264\001\174\246\174\246\174" +
    "\246\264\001\264\001\174\246\174\246\174\246" +
    "\174\246\174\246\174\246\174\246\174\246\264" +
    "\001\174\246\174\246\174\246\174\246\174\246" +
    "\174\246\136\254\264\001\264\001\264\001\136" +
    "\254\136\355\264\001\264\001\264\001\264\001" +
    "\264\001\264\001\264\001\264\001\264\001\136" +
    "\357\264\001\264\001\264\001\264\001\136\361" +
    "\136\361\136\361\264\001\264\001\264\001\136" +
    "\361\136\361\136\361\264\001\264\001\136\361" +
    "\136\361\136\361\136\361\136\361\136\361\136" +
    "\361\136\361\264\001\136\361\136\363\136\361" +
    "\136\361\136\361\136\365\106\244\264\001\264" +
    "\001\264\001\106\244\106\244\264\001\264\001" +
    "\264\001\264\001\264\001\264\001\264\001\264" +
    "\001\264\001\106\244\264\001\245\232\264\001" +
    "\264\001\106\244\106\244\106\244\245\267\264" +
    "\001\245\232\106\244\106\244\106\244\264\001" +
    "\264\001\106\244\106\244\106\244\106\244\106" +
    "\244\106\244\106\244\106\244\264\001\106\244" +
    "\106\244\106\244\106\244\106\244\106\244\147" +
    "\210\147\210\264\001\264\001\245\232\245\232" +
    "\147\210\147\210\264\001\147\210\147\210\264" +
    "\001\264\001\264\001\264\001\264\001\264\001" +
    "\264\001\264\001\264\001\147\210\147\210\147" +
    "\210\264\001\264\001\264\001\147\210\147\210" +
    "\147\210\264\001\264\001\147\210\147\210\147" +
    "\210\147\210\147\210\147\210\147\210\147\210" +
    "\264\001\147\210\244\234\147\210\147\210\147" +
    "\210\043\206\043\206\244\267\264\001\244\234" +
    "\264\001\043\206\043\206\264\001\043\206\043" +
    "\206\264\001\264\001\264\001\264\001\163\226" +
    "\264\001\264\001\264\001\264\001\043\206\043" +
    "\206\043\206\163\226\264\001\264\001\043\206" +
    "\043\206\043\206\244\234\244\234\043\206\043" +
    "\206\043\206\043\206\043\206\043\206\043\206" +
    "\043\206\264\001\043\206\264\001\043\206\043" +
    "\206\043\206\076\064\076\064\264\001\163\u0119" +
    "\163\u011b\264\001\076\206\076\206\264\001\264" +
    "\001\076\206\264\001\264\001\264\001\264\001" +
    "\264\001\264\001\264\001\264\001\264\001\076" +
    "\206\076\206\076\206\264\001\264\001\264\001" +
    "\076\206\076\206\076\206\264\001\264\001\076" +
    "\206\076\206\076\206\076\206\076\206\076\206" +
    "\076\206\076\206\264\001\076\206\100\212\076" +
    "\206\076\206\076\206\264\001\100\225\100\212" +
    "\264\001\100\212\100\265\264\001\264\001\264" +
    "\001\264\001\157\230\264\001\264\001\264\001" +
    "\264\001\100\212\100\212\100\212\157\230\264" +
    "\001\264\001\100\212\100\212\100\212\264\001" +
    "\264\001\100\212\100\212\100\212\100\212\100" +
    "\212\100\212\100\212\100\212\213\216\100\212" +
    "\264\001\100\212\100\212\100\212\213\216\264" +
    "\001\213\216\157\230\157\230\264\001\264\001" +
    "\264\001\264\001\264\001\264\001\264\001\264" +
    "\001\213\216\213\216\213\216\264\001\264\001" +
    "\264\001\213\216\213\216\213\216\264\001\264" +
    "\001\213\216\213\216\213\216\213\216\213\216" +
    "\213\216\213\216\213\216\164\214\213\216\264" +
    "\001\213\216\213\216\213\216\164\214\264\001" +
    "\164\214\264\001\264\001\264\001\264\001\264" +
    "\001\264\001\264\001\264\001\264\001\264\001" +
    "\164\214\164\214\164\214\264\001\264\001\264" +
    "\001\164\214\164\214\164\214\264\001\264\001" +
    "\164\214\164\214\164\214\164\214\164\214\164" +
    "\214\164\214\164\214\101\267\164\214\264\001" +
    "\164\214\164\214\164\214\264\001\264\001\264" +
    "\001\264\001\264\001\264\001\264\001\101\056" +
    "\101\056\101\056\264\001\264\001\264\001\101" +
    "\056\101\056\101\056\264\001\264\001\101\056" +
    "\101\056\101\056\101\056\101\056\101\056\101" +
    "\056\101\056\264\001\101\056\264\001\101\056" +
    "\101\056\101\056\250\252\250\252\264\001\264" +
    "\001\264\001\250\252\250\252\250\252\264\001" +
    "\264\001\264\001\250\252\250\252\250\252\264" +
    "\001\264\001\250\252\250\252\250\252\250\252" +
    "\250\252\250\252\250\252\250\252\264\001\250" +
    "\252\250\252\250\252\250\252\250\252\250\252" +
    "\222\357\222\u014f\264\001\264\001\264\001\222" +
    "\361\222\361\222\361\264\001\264\001\264\001" +
    "\222\361\222\361\222\361\264\001\264\001\222" +
    "\361\222\361\222\361\222\361\222\361\222\361" +
    "\222\361\222\361\264\001\222\361\222\363\222" +
    "\361\222\361\222\361\222\365\221\250\221\250" +
    "\264\001\264\001\264\001\221\250\221\250\221" +
    "\250\264\001\264\001\264\001\221\250\221\250" +
    "\221\250\264\001\264\001\221\250\221\250\221" +
    "\250\221\250\221\250\221\250\221\250\221\250" +
    "\264\001\221\250\221\250\221\250\221\250\221" +
    "\250\221\250\167\357\264\001\264\001\264\001" +
    "\264\001\167\361\167\361\167\361\264\001\264" +
    "\001\264\001\167\361\167\361\167\361\264\001" +
    "\264\001\167\361\167\361\167\361\167\361\167" +
    "\361\167\361\167\361\167\361\264\001\167\361" +
    "\167\363\167\361\167\361\167\361\167\365\206" +
    "\243\206\243\206\243\264\001\264\001\264\001" +
    "\206\243\206\243\206\243\264\001\264\001\206" +
    "\243\206\243\206\243\206\243\206\243\206\243" +
    "\206\243\206\243\264\001\206\243\264\001\206" +
    "\243\206\243\206\243\206\245\061\243\061\243" +
    "\061\243\264\001\264\001\264\001\061\243\061" +
    "\243\061\243\264\001\264\001\061\243\061\243" +
    "\061\243\061\243\061\243\061\243\061\243\061" +
    "\243\264\001\061\243\264\001\061\243\061\243" +
    "\061\243\061\245\060\074\060\074\060\074\264" +
    "\001\264\001\264\001\060\074\060\074\060\074" +
    "\264\001\264\001\060\074\060\074\060\074\060" +
    "\074\060\074\060\074\060\074\060\074\264\001" +
    "\060\074\264\001\060\074\060\074\060\074\060" +
    "\074\057\072\057\072\057\072\264\001\264\001" +
    "\264\001\057\072\057\072\057\072\264\001\264" +
    "\001\057\072\057\072\057\072\057\072\057\072" +
    "\057\072\057\072\057\072\264\001\057\072\264" +
    "\001\057\072\057\072\057\072\057\072\056\070" +
    "\056\070\056\070\264\001\264\001\264\001\056" +
    "\070\056\070\056\070\264\001\264\001\056\070" +
    "\056\070\056\070\056\070\056\070\056\070\056" +
    "\070\056\070\264\001\056\070\264\001\056\070" +
    "\056\070\056\070\056\070\166\u0121\166\u0121\166" +
    "\u0121\264\001\264\001\264\001\166\u0121\166\u0121" +
    "\166\u0121\264\001\264\001\166\u0121\166\u0121\166" +
    "\u0121\166\u0121\166\u0121\166\u0121\166\u0121\166\u0121" +
    "\264\001\166\u0121\264\001\166\u0121\166\u0121\166" +
    "\u0121\155\167\155\167\155\167\264\001\264\001" +
    "\264\001\155\167\155\167\155\167\264\001\264" +
    "\001\155\167\155\167\155\167\155\167\155\167" +
    "\155\167\155\167\155\167\264\001\155\167\264" +
    "\001\155\167\155\167\155\167\077\046\077\046" +
    "\077\046\264\001\264\001\264\001\077\046\077" +
    "\046\077\046\264\001\264\001\077\046\077\046" +
    "\077\046\077\046\077\046\077\046\077\046\077" +
    "\046\264\001\077\046\264\001\077\046\077\046" +
    "\077\046\055\241\055\241\055\241\264\001\264" +
    "\001\264\001\055\241\055\241\055\241\264\001" +
    "\264\001\055\241\055\241\055\241\055\241\055" +
    "\241\055\241\055\241\055\241\264\001\055\241" +
    "\264\001\055\241\055\241\055\241\027\167\027" +
    "\167\027\167\264\001\264\001\264\001\027\167" +
    "\027\167\027\167\264\001\264\001\027\167\027" +
    "\167\027\167\027\167\027\167\027\167\027\167" +
    "\027\167\264\001\027\167\264\001\027\167\027" +
    "\167\027\167\264\001\264\001\315\000\001\241" +
    "\001\001\111\071\063\064\210\001\001\003\003" +
    "\047\112\211\123\124\061\001\134\135\017\101" +
    "\246\074\075\256\173\001\242\170\227\261\121" +
    "\073\062\062\173\221\220\170\120\002\013\251" +
    "\073\121\003\174\175\071\173\112\136\170\151" +
    "\136\141\142\101\227\222\250\147\175\043\100" +
    "\245\000\043\074\065\037\077\074\075\043\100" +
    "\160\161\162\163\112\027\062\145\146\072\054" +
    "\043\052\113\012\153\131\073\112\043\100\101" +
    "\131\126\103\156\004\043\044\004\043\100\160" +
    "\131\243\163\207\113\011\000\043\100\244\000" +
    "\150\130\066\126\217\165\112\235\202\131\020" +
    "\263\262\260\114\255\126\041\003\254\252\231" +
    "\030\014\201\241\205\001\125\001\124\120\003" +
    "\001\001\116\006\022\023\024\025\001\001\022" +
    "\026\027\030\115\001\001\031\114\001\001\032" +
    "\033\034\035\001\001\036\001\001\037\001\001" +
    "\001\001\040\001\001\001\001\001\001\001\001" +
    "\001\001\001\022"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }




/** global variables to store the grammar the directivess and a factory to build various concepts */
	private IFactory factory;
	private Grammar grammar;
	private DirectiveSet directives;

    public void setGrammar(Grammar  grammar) {
        this.grammar = grammar;
    }
    
    public void setFactory(IFactory factory) {
        this.factory = factory;
    }
    
    public void setDirectiveSet(DirectiveSet directives) {
        this.directives = directives;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {



    private Grammar getGrammar() {
        return parser.grammar;
    }
    
    public IFactory getFactory() {
        return parser.factory;
    }
    
    public DirectiveSet getDirectives() {
        return parser.directives;
    }
    
	/** current kind of symbol to declare */
	private SymbolKind currentKind;
	/** current type of symbol to declare */
	private String currentType;

	/** Current precedence priority */
	private int currentPriority = 0;
	/** Current precedence associativity */
	private Associativity currentAssociativity = Associativity.NO;

	/** update the precedences we are declaring */
	private void updatePrecedence(Associativity associativity) {
		this.currentAssociativity = associativity;
		if (associativity != Associativity.NO) {
			++this.currentPriority;
	    }
	}
  
	private GrammarSymbol lhs = null;

	/** update the lhs symbol of a production */
	private void updateLhs(GrammarSymbol lhs) {
		this.lhs = lhs;
    }
  
	private GrammarSymbol getKnownSymbol(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		GrammarSymbol sym = getGrammar().getSymbol(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("Symbol \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  
	private Terminal getKnownTerminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		Terminal sym = getGrammar().getTerminal(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("Terminal \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  
	private NonTerminal getKnownNonTerminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		NonTerminal sym = getGrammar().getNonTerminal(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("Non terminal \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
    
	private State getKnownState(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		State sym = getGrammar().getState(id);
		if (sym == null) {
			ErrorManager.getManager().emit_warning("State \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  

  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= grammar EOF 
          case 0:
            {
              Object RESULT;
RESULT = null;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$START, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= package_spec SEMICOLON 
          // spec ::= option_spec SEMICOLON 
          // spec ::= parser_spec SEMICOLON 
          // spec ::= symbol_spec SEMICOLON 
          // spec ::= precedence_spec SEMICOLON 
          // spec ::= expect_spec SEMICOLON 
          // spec ::= start_spec SEMICOLON 
          // spec ::= production_spec SEMICOLON 
          // spec ::= error SEMICOLON 
          case 1:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.spec, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= PACKAGE multipart_id 
          case 2:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;

								if ( ! getDirectives().setDirective(Directive.PACKAGE_NAME, id.toString())) {
									ErrorManager.getManager().emit_warning("Redundant package name (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.package_spec, CUP$stack.get(CUP$size - 2), id$);
            }

          // parser_spec ::= PARSER multipart_id 
          case 3:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              StringBuilder name = (StringBuilder) name$.value;

								if ( ! getDirectives().setDirective(Directive.PARSER_NAME, name.toString())) {
									ErrorManager.getManager().emit_warning("Redundant parser name (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.parser_spec, CUP$stack.get(CUP$size - 2), name$);
            }

          // option_spec ::= OPTION option_list 
          case 4:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_spec, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis2 ::= COMMA option_ 
          case 5:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis2, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_ $parenthesis2$0_many 
          case 6:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // option_ ::= robust_id 
          case 7:
            {
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;

								if ( ! getDirectives().addDirective(Directive.OPTION, opt, null)) {
									ErrorManager.getManager().emit_warning("Redundant option " + opt + " (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_, opt$, opt$);
            }

          // option_ ::= robust_id EQUALS robust_id 
          case 8:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;

								if ( ! getDirectives().addDirective(Directive.OPTION, opt, val)) {
									ErrorManager.getManager().emit_warning("Redundant option " + opt + " = " + val + " (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_, opt$, val$);
            }

          // custom_code_spec ::= key_code CODE_STRING 
          case 9:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol key$ = CUP$stack.get(CUP$size - 2);
              Directive key = (Directive) key$.value;

								if ( ! getDirectives().setDirective(key, code)) {
									ErrorManager.getManager().emit_warning("Redundant " + key + " (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.custom_code_spec, key$, code$);
            }

          // key_code ::= PARSER ACTION CODE 
          case 10:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_ACTION_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER IMPORT CODE 
          case 11:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_IMPORT_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER CODE 
          case 12:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER INIT WITH 
          case 13:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_INIT_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER AFTER REDUCE 
          case 14:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_AFTER_REDUCE_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= SCANNER IMPORT CODE 
          case 15:
            {
              Directive RESULT;
 RESULT = Directive.SCANNER_IMPORT_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= SCANNER CODE 
          case 16:
            {
              Directive RESULT;
 RESULT = Directive.SCANNER_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // symbol_spec ::= symbol_decl symbol_list 
          case 17:
            {
 currentType = null; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_spec, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol_decl ::= symbol_kind symbol_type 
          case 18:
            {
              com.github.jhoenicke.javacup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol kind$ = CUP$stack.get(CUP$size - 2);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_decl, kind$, type$);
            }

          // symbol_kind ::= TERMINAL 
          case 19:
            {
 currentKind = SymbolKind.TERMINAL; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_kind, CUP$sym, CUP$sym);
            }

          // symbol_kind ::= NONTERMINAL 
          case 20:
            {
 currentKind = SymbolKind.NONTERMINAL; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_kind, CUP$sym, CUP$sym);
            }

          // symbol_kind ::= STATE 
          case 21:
            {
 currentKind = SymbolKind.STATE; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_kind, CUP$sym, CUP$sym);
            }

          // symbol_type ::= type_id 
          case 22:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 currentType = id.toString(); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_type, id$, id$);
            }

          // $parenthesis3 ::= COMMA new_symbol_id 
          case 23:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis3, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol_list ::= new_symbol_id $parenthesis3$0_many 
          case 24:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // new_symbol_id ::= symbol_id 
          case 25:
            {
              com.github.jhoenicke.javacup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
 
								if (getGrammar().getSymbol(sym_id) != null) {
									ErrorManager.getManager().emit_error("Symbol \"" + sym_id + "\" has already been declared", sym_id$);
								} else {
									GrammarSymbol symbol = getFactory().createSymbol(currentKind, sym_id, currentType);
									if (symbol == null) {
										ErrorManager.getManager().emit_error("Symbol \"" + sym_id + "\" is not declared", sym_id$);
									} else {
										getGrammar().addUniqueSymbol(symbol);
									}
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.new_symbol_id, sym_id$, sym_id$);
            }

          // precedence_spec ::= PRECEDENCE associativity_decl precedence_list 
          case 26:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precedence_spec, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // associativity_decl ::= LEFT 
          case 27:
            {
 updatePrecedence(Associativity.LEFT); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.associativity_decl, CUP$sym, CUP$sym);
            }

          // associativity_decl ::= RIGHT 
          case 28:
            {
 updatePrecedence(Associativity.RIGHT); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.associativity_decl, CUP$sym, CUP$sym);
            }

          // associativity_decl ::= NONASSOC 
          case 29:
            {
 updatePrecedence(Associativity.NONE); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.associativity_decl, CUP$sym, CUP$sym);
            }

          // $parenthesis4 ::= COMMA precterminal_id 
          case 30:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis4, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // precedence_list ::= precterminal_id $parenthesis4$0_many 
          case 31:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precedence_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_id ::= symbol_id 
          case 32:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;

								Terminal symbol = getKnownTerminal(name$, name);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Symbol \"" + name + "\" is not declared and cannot be used for precedence", name$);
								} else {
									symbol.setPrecedence(currentPriority, currentAssociativity);
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precterminal_id, name$, name$);
            }

          // precterminal_id ::= REGEXP 
          case 33:
            {
              com.github.jhoenicke.javacup.runtime.Symbol content$ = CUP$stack.get(CUP$size - 1);
              String content = (String) content$.value;

								RegExp symbol = getGrammar().getOrAddRegexp(content);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Regexp \"" + content + "\" cannot be declared for precedence", content$);
								} else {
									symbol.setPrecedence(currentPriority, currentAssociativity);
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precterminal_id, content$, content$);
            }

          // expect_spec ::= EXPECT robust_id 
          case 34:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;

								if ( ! getDirectives().setDirective(Directive.EXPECT, val)) {
									ErrorManager.getManager().emit_warning("Redundant expect (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expect_spec, CUP$stack.get(CUP$size - 2), val$);
            }

          // start_spec ::= START WITH symbol_id 
          case 35:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;

								NonTerminal symbol = getKnownNonTerminal(name$, name);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Symbol \"" + name + "\" is not declared for start symbol", name$);
								} else {
									getGrammar().setStartSymbol(symbol); 
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.start_spec, CUP$stack.get(CUP$size - 3), name$);
            }

          // production_spec ::= lhs_nonterminal COLON_COLON_EQUALS rhs_nonterminal_list 
          // production_spec ::= lhs_terminal COLON_COLON_EQUALS rhs_terminal_list 
          // production_spec ::= lhs_state COLON_COLON_EQUALS rhs_state_list 
          case 36:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.production_spec, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // lhs_nonterminal ::= SYMBOL_NONTERMINAL 
          case 37:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;
 updateLhs(getKnownNonTerminal(lhs_id$, lhs_id)); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.lhs_nonterminal, lhs_id$, lhs_id$);
            }

          // $parenthesis5 ::= BAR SYMBOL_TERMINAL 
          case 38:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis5, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // lhs_terminal ::= SYMBOL_TERMINAL $parenthesis5$0_many 
          case 39:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 2);
              String lhs_id = (String) lhs_id$.value;
 updateLhs(getKnownTerminal(lhs_id$, lhs_id)); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.lhs_terminal, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // lhs_state ::= SYMBOL_STATE 
          case 40:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;
 updateLhs(getKnownState(lhs_id$, lhs_id)); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.lhs_state, lhs_id$, lhs_id$);
            }

          // $parenthesis6 ::= BAR rhs_nonterminal 
          case 41:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis6, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_nonterminal_list ::= rhs_nonterminal $parenthesis6$0_many 
          case 42:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_nonterminal_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_nonterminal ::= prod_part$0_many prod_precedence$0_1 
          case 43:
            {
              com.github.jhoenicke.javacup.runtime.Symbol precedence$ = CUP$stack.get(CUP$size - 1);
              Terminal precedence = (Terminal) precedence$.value;
              com.github.jhoenicke.javacup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              java.util.List<ProductionPart> rhs = (java.util.List<ProductionPart>) rhs$.value;

								Production production = getFactory().createNonTerminalProduction(lhs, rhs, precedence);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_nonterminal, rhs$, precedence$);
            }

          // $parenthesis7 ::= BAR rhs_terminal 
          case 44:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis7, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_terminal_list ::= rhs_terminal $parenthesis7$0_many 
          case 45:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_terminal ::= REGEXP CODE_STRING$0_1 
          case 46:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 2);
              String regexp = (String) regexp$.value;

								Production production = getFactory().createSimpleTerminalProduction(lhs, regexp, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, regexp$, code$);
            }

          // rhs_terminal ::= REGEXP TILDA REGEXP CODE_STRING$0_1 
          case 47:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;

								Production enter = getFactory().createEnterStateTerminalProduction(lhs, from, null);
								getGrammar().addProduction(enter);
								Production in = getFactory().createInStateTerminalProduction(lhs, null);
								getGrammar().addProduction(in);
								Production leave = getFactory().createLeaveStateTerminalProduction(lhs, to, code);
								getGrammar().addProduction(leave);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, from$, code$);
            }

          // rhs_terminal ::= REGEXP TILDA SYMBOL_STATE CODE_STRING$0_1 
          case 48:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol state$ = CUP$stack.get(CUP$size - 2);
              String state = (String) state$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;

								Production production = getFactory().createEnterStateTerminalProduction(lhs, from, state, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, from$, code$);
            }

          // rhs_terminal ::= SYMBOL_STATE REGEXP CODE_STRING$0_1 
          case 49:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 2);
              String regexp = (String) regexp$.value;
              com.github.jhoenicke.javacup.runtime.Symbol state$ = CUP$stack.get(CUP$size - 3);
              String state = (String) state$.value;

								Production production = getFactory().createInStateTerminalProduction(lhs, state, regexp, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, state$, code$);
            }

          // rhs_terminal ::= SYMBOL_STATE TILDA REGEXP CODE_STRING$0_1 
          case 50:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 2);
              String regexp = (String) regexp$.value;
              com.github.jhoenicke.javacup.runtime.Symbol in$ = CUP$stack.get(CUP$size - 4);
              String in = (String) in$.value;

								Production production = getFactory().createLeaveStateTerminalProduction(lhs, in, regexp, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, in$, code$);
            }

          // rhs_terminal ::= SYMBOL_STATE TILDA REGEXP SYMBOL_STATE CODE_STRING$0_1 
          case 51:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 3);
              String regexp = (String) regexp$.value;
              com.github.jhoenicke.javacup.runtime.Symbol in$ = CUP$stack.get(CUP$size - 5);
              String in = (String) in$.value;

								Production production = getFactory().createEnterStateTerminalProduction(lhs, in, regexp, to, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, in$, code$);
            }

          // $parenthesis8 ::= BAR rhs_state 
          case 52:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis8, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_state_list ::= rhs_state $parenthesis8$0_many 
          case 53:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_state_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_state ::= REGEXP TILDA REGEXP CODE_STRING$0_1 
          case 54:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;

								Production enter = getFactory().createEnterStateStateProduction(lhs, from, null);
								getGrammar().addProduction(enter);
								Production leave = getFactory().createLeaveStateStateProduction(lhs, to, code);
								getGrammar().addProduction(leave);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_state, from$, code$);
            }

          // rhs_state ::= SYMBOL_STATE REGEXP TILDA REGEXP CODE_STRING$0_1 
          case 55:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;
              com.github.jhoenicke.javacup.runtime.Symbol in$ = CUP$stack.get(CUP$size - 5);
              String in = (String) in$.value;

								Production enter = getFactory().createEnterStateStateProduction(lhs, in, from, null);
								getGrammar().addProduction(enter);
								Production leave = getFactory().createLeaveStateStateProduction(lhs, to, code);
								getGrammar().addProduction(leave);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_state, in$, code$);
            }

          // prod_precedence ::= PERCENT_PREC symbol_id 
          case 56:
            {
              Terminal RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
 RESULT = getKnownTerminal(term$, term); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_precedence, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // prod_part ::= wild_symbol_id label_id$0_1 
          case 57:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol label$ = CUP$stack.get(CUP$size - 1);
              String label = (String) label$.value;
              com.github.jhoenicke.javacup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 2);
              ProductionPart symb = (ProductionPart) symb$.value;
 RESULT = getFactory().createSimplePart(symb, label); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part, symb$, label$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 58:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
 RESULT = getFactory().createActionPart(code); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part, code$, code$, RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id STAR 
          case 59:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              ProductionPart child = (ProductionPart) child$.value;
 RESULT = getFactory().createMany0Part(child); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id PLUS 
          case 60:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              ProductionPart child = (ProductionPart) child$.value;
 RESULT = getFactory().createMany1Part(child); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id QUESTION 
          case 61:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              ProductionPart child = (ProductionPart) child$.value;
 RESULT = getFactory().createOptionalPart(child); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= symbol_id 
          case 62:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 1);
              String symid = (String) symid$.value;
 RESULT = getFactory().createSymbolPart(getKnownSymbol(symid$, symid)); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, symid$, symid$, RESULT);
            }

          // wild_symbol_id ::= REGEXP 
          case 63:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol content$ = CUP$stack.get(CUP$size - 1);
              String content = (String) content$.value;

								RegExp symbol = getGrammar().getOrAddRegexp(content);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Regexp \"" + content + "\" cannot be used ", content$);
								}
								RESULT = getFactory().createSymbolPart(symbol);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, content$, content$, RESULT);
            }

          // wild_symbol_id ::= LPARENT prod_part$1_many RPARENT 
          case 64:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol prod$ = CUP$stack.get(CUP$size - 2);
              java.util.List<ProductionPart> prod = (java.util.List<ProductionPart>) prod$.value;
 RESULT = getFactory().createGroupPart(prod); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // label_id ::= COLON robust_id 
          case 65:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol label$ = CUP$stack.get(CUP$size - 1);
              String label = (String) label$.value;
 RESULT = label; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.label_id, CUP$stack.get(CUP$size - 2), label$, RESULT);
            }

          // multipart_id ::= robust_id 
          case 66:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              String id = (String) id$.value;
 RESULT = new StringBuilder(id); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.multipart_id, id$, id$, RESULT);
            }

          // multipart_id ::= multipart_id DOT robust_id 
          case 67:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              String id = (String) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append('.').append(id); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.multipart_id, list$, id$, RESULT);
            }

          // type_id ::= multipart_id 
          case 68:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type_id, id$, id$, RESULT);
            }

          // type_id ::= type_id LBRACK RBRACK 
          case 69:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id.append("[]"); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type_id, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id LT typearglist GT 
          case 70:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id.append('<').append(types).append('>'); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type_id, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typeargument 
          case 71:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              StringBuilder type = (StringBuilder) type$.value;
 RESULT = type; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typearglist, type$, type$, RESULT);
            }

          // typearglist ::= typearglist COMMA typeargument 
          case 72:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              com.github.jhoenicke.javacup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append(",").append(arg); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typearglist, list$, arg$, RESULT);
            }

          // typeargument ::= type_id 
          case 73:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              StringBuilder type = (StringBuilder) type$.value;
 RESULT = type; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typeargument, type$, type$, RESULT);
            }

          // typeargument ::= wildcard 
          case 74:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              StringBuilder name = (StringBuilder) name$.value;
 RESULT = name; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typeargument, name$, name$, RESULT);
            }

          // wildcard ::= QUESTION 
          case 75:
            {
              StringBuilder RESULT;
 RESULT = new StringBuilder("?"); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wildcard, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 76:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" extends ").append(id); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wildcard, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 77:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" super ").append(id); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wildcard, w$, id$, RESULT);
            }

          // robust_id ::= error 
          case 78:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = CUP$stack.get(CUP$size - 1);

								ErrorManager.getManager().emit_error("Illegal use of reserved word", e$);
								RESULT="ILLEGAL";
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.robust_id, e$, e$, RESULT);
            }

          // CODE_STRING$0_1 ::= 
          case 79:
            {
              String RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.CODE_STRING$0_1, CUP$sym, CUP$sym, RESULT);
            }

          // label_id$0_1 ::= 
          case 80:
            {
              String RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.label_id$0_1, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part$0_many ::= 
          case 81:
            {
              java.util.ArrayList<ProductionPart> RESULT = new java.util.ArrayList<ProductionPart>();
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$0_many, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part$0_many ::= prod_part$0_many prod_part 
          case 82:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<ProductionPart> RESULT = (java.util.ArrayList<ProductionPart>) CUP$0.value;
              RESULT.add((ProductionPart) CUP$1.value);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$0_many, CUP$0, CUP$1, RESULT);
            }

          // prod_part$1_many ::= prod_part 
          case 83:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<ProductionPart> RESULT = new java.util.ArrayList<ProductionPart>();
              RESULT.add((ProductionPart) CUP$0.value);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$1_many, CUP$0, CUP$0, RESULT);
            }

          // prod_part$1_many ::= prod_part$1_many prod_part 
          case 84:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<ProductionPart> RESULT = (java.util.ArrayList<ProductionPart>) CUP$0.value;
              RESULT.add((ProductionPart) CUP$1.value);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$1_many, CUP$0, CUP$1, RESULT);
            }

          // prod_precedence$0_1 ::= 
          case 85:
            {
              Terminal RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_precedence$0_1, CUP$sym, CUP$sym, RESULT);
            }

          // $parenthesis1$0_many ::= 
          case 86:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis1$0_many ::= $parenthesis1$0_many $parenthesis1 
          case 87:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis2$0_many ::= 
          case 88:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis2$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis2$0_many ::= $parenthesis2$0_many $parenthesis2 
          case 89:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis2$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis3$0_many ::= 
          case 90:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis3$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis3$0_many ::= $parenthesis3$0_many $parenthesis3 
          case 91:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis3$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis4$0_many ::= 
          case 92:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis4$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis4$0_many ::= $parenthesis4$0_many $parenthesis4 
          case 93:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis4$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis5$0_many ::= 
          case 94:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis5$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis5$0_many ::= $parenthesis5$0_many $parenthesis5 
          case 95:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis5$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis6$0_many ::= 
          case 96:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis6$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis6$0_many ::= $parenthesis6$0_many $parenthesis6 
          case 97:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis6$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis7$0_many ::= 
          case 98:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis7$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis7$0_many ::= $parenthesis7$0_many $parenthesis7 
          case 99:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis7$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis8$0_many ::= 
          case 100:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis8$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis8$0_many ::= $parenthesis8$0_many $parenthesis8 
          case 101:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis8$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
