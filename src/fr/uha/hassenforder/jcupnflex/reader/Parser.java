
//----------------------------------------------------
// The following code was generated by jh-javacup-1.3 20230621
// Wed Jul 12 10:50:37 GMT+01:00 2023
//----------------------------------------------------

package fr.uha.hassenforder.jcupnflex.reader;

import fr.uha.hassenforder.jcupnflex.ErrorManager;
import fr.uha.hassenforder.jcupnflex.model.Associativity;
import fr.uha.hassenforder.jcupnflex.model.Directive;
import fr.uha.hassenforder.jcupnflex.model.DirectiveSet;
import fr.uha.hassenforder.jcupnflex.model.IFactory;
import fr.uha.hassenforder.jcupnflex.model.Grammar;
import fr.uha.hassenforder.jcupnflex.model.GrammarSymbol;
import fr.uha.hassenforder.jcupnflex.model.NonTerminal;
import fr.uha.hassenforder.jcupnflex.model.Production;
import fr.uha.hassenforder.jcupnflex.model.ProductionPart;
import fr.uha.hassenforder.jcupnflex.model.RegExp;
import fr.uha.hassenforder.jcupnflex.model.State;
import fr.uha.hassenforder.jcupnflex.model.SymbolKind;
import fr.uha.hassenforder.jcupnflex.model.Terminal;

/** jh-javacup-1.3 20230621 generated parser.
  * @version Wed Jul 12 10:50:37 GMT+01:00 2023
  */
public class Parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\320\000\002\000\002\001\002\002\002\003\002" +
    "\055\002\004\002\005\001\005\003\006\002\037" +
    "\003\037\003\037\002\037\003\037\003\037\003" +
    "\037\002\007\002\010\002\011\001\011\001\011" +
    "\001\012\001\057\002\013\002\014\001\015\003" +
    "\020\001\020\001\020\001\061\002\016\002\017" +
    "\001\017\001\021\002\022\003\023\003\023\003" +
    "\063\000\024\001\064\002\027\002\032\001\066" +
    "\002\025\002\026\002\072\002\030\002\031\002" +
    "\031\004\031\004\031\003\031\004\031\005\075" +
    "\002\033\002\034\004\034\005\051\002\050\002" +
    "\050\001\035\002\035\002\035\002\035\001\035" +
    "\001\035\003\041\002\043\001\043\003\044\001" +
    "\044\003\044\004\045\001\045\003\046\001\046" +
    "\001\047\001\047\003\047\003\042\001\074\000" +
    "\077\000\070\000\070\002\100\001\100\002\071" +
    "\000\054\000\054\002\056\000\056\002\060\000" +
    "\060\002\062\000\062\002\065\000\065\002\067" +
    "\000\067\002\073\000\073\002\076\000\076\002" +
    "\267\267\337\u046d\271\u0393\u0425\u019d\267\267\267" +
    "\u03d5\u043f\357\u03dd\u0395\267\u03f1\u03fd\u03e1\267\u0373" +
    "\u0357\u034b\u0303\u0efd\267\u02bb\u0253\u022b\u0209\u03d5\u03b5" +
    "\u0399\u0443\267\u04c7\u0a85\u01b5\u0423\u015f\u0273\u01ff\u011d" +
    "\271\u0421\u043d\u0ecb\u0e01\u0dcd\u0d99\u0d65\u0485\u01ef\u03b3" +
    "\u01e3\271\u03ed\267\267\267\267\u03af\u01bd\u03ab\u0adf" +
    "\u0e99\u0b2f\u0c07\267\267\267\267\u09cf\u03eb\u03e7\267" +
    "\u034d\u043b\u0437\u0431\u042f\u042d\u01b9\u03a7\u036f\u019b\u036b" +
    "\u0305\u0367\u0177\u0443\u03e9\u0363\u0155\u0413\u0171\u031b\u0973" +
    "\371\u048b\u016d\u0319\u0457\u0425\u0119\u030f\u0a2b\u035f\u0329" +
    "\u02bd\u0325\u03b1\u0e67\u031d\u0b4b\u0167\u01f5\u01ad\u0aa1\u0bc7" +
    "\u02d7\u0e35\u0cfd\u074b\u085f\u06ef\u0693\u0917\u02d5\u0455\323" +
    "\u03e3\u02d3\u02d1\u040d\u0451\u02c7\u0d31\u02e1\u0297\u024f\u010d" +
    "\u0b7b\u0275\u022d\u08bb\u028d\u028b\u0cbf\u0c81\u01e5\u0637\u05db" +
    "\u057f\u0803\277\u0289\321\317\u03df\u0287\u044b\315\u03a7" +
    "\u0245\273\u01a5\u0a7b\u09ef\u0243\u0523\u0c43\u07a7\u0241\303" +
    "\u023f\u01fd\u01fb\301\u01f9\u01b3\u0173\u012b\u0f5f\262\000" +
    "\000\000\000\000\000\050\052\054\000\000\000" +
    "\000\000\116\000\000\000\264\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\004" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\004\004\004\004\000\000\000\000\000\000\000" +
    "\004\004\004\004\000\000\000\024\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\031\107\067\263\003\002" +
    "\053\010\245\076\245\076\233\244\262\244\256" +
    "\244\053\231\233\244\262\244\256\244\242\244" +
    "\236\244\235\244\202\244\242\244\236\244\235" +
    "\244\202\244\001\007\031\201\031\201\031\201" +
    "\031\111\031\111\031\111\031\201\031\201\031" +
    "\201\031\111\031\111\031\201\031\201\031\201" +
    "\031\173\031\173\031\201\031\201\031\201\031" +
    "\111\031\201\215\107\031\201\031\201\031\201" +
    "\233\u015b\262\u016d\256\u016b\233\u015d\150\112\142" +
    "\u0103\052\212\242\u0167\236\u0161\235\u015f\202\u0139" +
    "\215\345\052\212\266\164\014\137\014\141\014" +
    "\143\266\164\215\111\215\111\215\111\215\111" +
    "\215\111\215\111\215\111\215\111\215\111\215" +
    "\111\215\111\215\111\215\111\215\111\135\107" +
    "\142\u0105\215\111\215\111\215\111\215\111\215" +
    "\111\047\212\215\111\215\111\215\111\052\241" +
    "\163\230\047\212\144\112\135\345\137\112\265" +
    "\154\163\275\131\114\163\230\265\154\135\111" +
    "\135\111\135\111\135\111\135\111\135\111\135" +
    "\111\135\111\135\111\135\111\135\111\135\111" +
    "\135\111\135\111\006\107\125\066\135\111\135" +
    "\111\135\111\135\111\135\111\246\226\135\111" +
    "\135\111\135\111\165\224\047\032\264\156\045" +
    "\006\246\226\122\110\264\156\076\044\165\224" +
    "\045\231\006\115\006\117\006\121\006\111\006" +
    "\111\006\111\006\111\006\123\006\111\006\111" +
    "\006\111\006\111\006\111\006\111\006\111\226" +
    "\107\066\106\006\125\006\111\006\111\006\111" +
    "\006\111\064\012\006\111\006\111\006\111\164" +
    "\u011b\263\162\261\136\260\144\051\212\263\162" +
    "\261\136\260\144\164\u011d\035\217\051\212\226" +
    "\u0159\226\u0159\226\u0159\226\u0159\226\u0159\226\u0159" +
    "\226\u0159\226\u0159\226\u0159\226\u0159\226\u0159\226" +
    "\u0159\226\u0159\226\u0159\220\107\034\215\226\u0159" +
    "\226\u0159\226\u0159\226\u0159\226\u0159\051\237\226" +
    "\u0159\226\u0159\226\u0159\257\146\255\152\251\130" +
    "\244\320\257\146\255\152\251\130\244\320\214" +
    "\060\214\060\033\213\220\111\220\111\220\111" +
    "\220\111\220\111\220\111\220\111\220\111\220" +
    "\111\220\111\220\111\220\111\220\111\220\111" +
    "\217\107\050\212\220\111\220\111\220\111\220" +
    "\111\220\111\050\212\220\111\220\111\220\111" +
    "\240\314\234\150\223\166\222\310\240\314\234" +
    "\150\223\166\222\310\213\014\213\014\050\235" +
    "\217\111\217\111\217\111\217\111\217\111\217" +
    "\111\217\111\217\111\217\111\217\111\217\111" +
    "\217\111\217\111\217\111\155\107\032\211\217" +
    "\111\217\111\217\111\217\111\217\111\210\160" +
    "\217\111\217\111\217\111\210\u0147\205\140\204" +
    "\142\200\134\170\132\205\u013f\204\142\200\134" +
    "\170\u0123\212\300\212\300\155\147\155\147\155" +
    "\147\155\147\155\147\155\147\155\147\155\147" +
    "\155\147\155\147\155\147\155\147\155\147\155" +
    "\147\127\107\027\171\155\147\155\147\155\147" +
    "\155\147\155\147\151\316\155\147\155\147\155" +
    "\147\151\316\145\312\140\306\161\274\161\274" +
    "\145\312\140\306\156\270\156\270\154\022\154" +
    "\022\127\331\127\331\127\331\127\331\127\331" +
    "\127\331\127\331\127\331\127\331\127\331\127" +
    "\331\127\331\127\331\127\331\114\107\026\167" +
    "\127\331\127\331\127\331\127\331\127\331\025" +
    "\165\127\331\127\331\127\331\153\100\153\u0113" +
    "\134\062\134\341\130\016\130\333\126\276\126" +
    "\276\124\104\124\104\024\163\114\325\114\325" +
    "\114\325\114\325\114\325\114\325\114\325\114" +
    "\325\114\325\114\325\114\325\114\325\114\325" +
    "\114\325\016\107\004\105\114\325\114\325\114" +
    "\325\114\325\114\325\040\225\114\325\114\325" +
    "\114\325\123\102\123\102\077\272\077\272\075" +
    "\064\075\064\065\266\065\266\157\122\157\122" +
    "\037\223\016\155\016\155\016\155\016\155\016" +
    "\155\016\155\016\155\016\155\016\155\016\155" +
    "\016\155\016\155\016\155\016\155\015\107\036" +
    "\221\016\155\016\155\016\155\016\155\016\155" +
    "\022\126\016\155\016\155\016\155\133\304\133" +
    "\304\070\124\070\265\020\302\020\302\012\131" +
    "\012\133\243\315\243\317\021\120\015\147\015" +
    "\147\015\147\015\147\015\147\015\147\015\147" +
    "\015\147\015\147\015\147\015\147\015\147\015" +
    "\147\015\147\005\107\136\357\015\147\015\147" +
    "\015\147\015\147\015\147\206\u0143\015\147\015" +
    "\147\015\147\237\305\237\307\203\u013b\203\u013d" +
    "\112\315\112\317\111\305\111\307\147\u010f\054" +
    "\243\046\233\005\111\005\111\005\111\005\111" +
    "\005\111\005\111\005\111\005\111\005\111\005" +
    "\111\005\111\005\111\005\111\005\111\002\011" +
    "\002\007\005\111\005\111\005\111\005\111\005" +
    "\111\013\135\005\111\005\111\005\111\121\040" +
    "\120\036\117\034\063\020\063\020\116\026\143" +
    "\244\115\030\055\042\002\013\143\244\041\227" +
    "\132\337\002\015\002\017\002\021\002\023\063" +
    "\257\002\025\241\u0165\002\027\002\031\207\u0145" +
    "\143\u0107\201\u0137\146\u010d\267\001\267\001\267" +
    "\001\002\033\002\035\002\037\267\001\002\041" +
    "\002\043\002\045\043\242\043\242\267\001\267" +
    "\001\043\242\043\242\043\242\043\242\267\001" +
    "\043\242\043\242\143\u0109\267\001\267\001\043" +
    "\242\043\242\043\242\267\001\267\001\267\001" +
    "\043\242\043\242\043\242\267\001\267\001\267" +
    "\001\043\242\043\242\043\242\267\001\267\001" +
    "\043\242\043\242\043\242\043\242\043\242\043" +
    "\242\043\242\043\242\267\001\043\242\043\242" +
    "\043\242\043\242\043\242\043\242\252\206\267" +
    "\001\252\206\267\001\252\206\252\206\267\001" +
    "\267\001\267\001\267\001\267\001\252\206\252" +
    "\206\252\206\267\001\252\206\252\206\267\001" +
    "\267\001\267\001\252\206\252\206\252\206\267" +
    "\001\267\001\267\001\252\206\252\206\252\206" +
    "\267\001\267\001\252\206\252\206\252\206\252" +
    "\206\252\206\252\206\252\206\252\206\267\001" +
    "\252\206\252\206\252\206\252\206\252\206\252" +
    "\206\231\200\267\001\231\200\267\001\231\200" +
    "\231\200\267\001\267\001\267\001\267\001\267" +
    "\001\231\200\231\200\231\200\267\001\231\200" +
    "\231\200\267\001\267\001\267\001\231\200\231" +
    "\200\231\200\267\001\267\001\267\001\231\200" +
    "\231\200\231\200\267\001\267\001\231\200\231" +
    "\200\231\200\231\200\231\200\231\200\231\200" +
    "\231\200\267\001\231\200\231\200\231\200\231" +
    "\200\231\200\231\200\230\176\267\001\230\176" +
    "\267\001\230\176\230\176\267\001\267\001\267" +
    "\001\267\001\267\001\230\176\230\176\230\176" +
    "\267\001\230\176\230\176\267\001\267\001\267" +
    "\001\230\176\230\176\230\176\267\001\267\001" +
    "\267\001\230\176\230\176\230\176\267\001\267" +
    "\001\230\176\230\176\230\176\230\176\230\176" +
    "\230\176\230\176\230\176\267\001\230\176\230" +
    "\176\230\176\230\176\230\176\230\176\227\174" +
    "\267\001\227\174\267\001\227\174\227\174\267" +
    "\001\267\001\267\001\267\001\267\001\227\174" +
    "\227\174\227\174\267\001\227\174\227\174\267" +
    "\001\267\001\267\001\227\174\227\174\227\174" +
    "\267\001\267\001\267\001\227\174\227\174\227" +
    "\174\267\001\267\001\227\174\227\174\227\174" +
    "\227\174\227\174\227\174\227\174\227\174\267" +
    "\001\227\174\227\174\227\174\227\174\227\174" +
    "\227\174\176\246\267\001\176\u012d\267\001\176" +
    "\246\176\246\267\001\267\001\267\001\267\001" +
    "\267\001\176\u012f\176\u0131\176\u0133\267\001\176" +
    "\246\176\246\267\001\267\001\267\001\176\246" +
    "\176\246\176\246\267\001\267\001\267\001\176" +
    "\246\176\246\176\246\267\001\267\001\176\246" +
    "\176\246\176\246\176\246\176\246\176\246\176" +
    "\246\176\246\267\001\176\246\176\246\176\246" +
    "\176\246\176\246\176\246\175\204\267\001\175" +
    "\204\267\001\175\204\175\204\267\001\267\001" +
    "\267\001\267\001\267\001\175\204\175\204\175" +
    "\204\267\001\175\204\175\204\267\001\267\001" +
    "\267\001\175\204\175\204\175\204\267\001\267" +
    "\001\267\001\175\204\175\204\175\204\267\001" +
    "\267\001\175\204\175\204\175\204\175\204\175" +
    "\204\175\204\175\204\175\204\267\001\175\204" +
    "\175\204\175\204\175\204\175\204\175\204\173" +
    "\202\267\001\173\202\267\001\173\202\173\202" +
    "\267\001\267\001\267\001\267\001\267\001\173" +
    "\202\173\202\173\202\267\001\173\202\173\202" +
    "\267\001\267\001\267\001\173\202\173\202\173" +
    "\202\267\001\267\001\267\001\173\202\173\202" +
    "\173\202\267\001\267\001\173\202\173\202\173" +
    "\202\173\202\173\202\173\202\173\202\173\202" +
    "\267\001\173\202\173\202\173\202\173\202\173" +
    "\202\173\202\254\210\267\001\267\001\267\001" +
    "\254\210\254\210\267\001\267\001\267\001\267" +
    "\001\267\001\267\001\267\001\267\001\267\001" +
    "\254\210\254\210\267\001\267\001\267\001\254" +
    "\210\254\210\254\210\267\001\267\001\267\001" +
    "\254\210\254\210\254\210\267\001\267\001\254" +
    "\210\254\210\254\210\254\210\254\210\254\210" +
    "\254\210\254\210\267\001\254\210\254\210\254" +
    "\210\254\210\254\210\254\210\232\170\267\001" +
    "\267\001\267\001\232\170\232\170\267\001\267" +
    "\001\267\001\267\001\267\001\267\001\267\001" +
    "\267\001\267\001\232\170\232\170\267\001\267" +
    "\001\267\001\232\170\232\170\232\170\267\001" +
    "\267\001\267\001\232\170\232\170\232\170\267" +
    "\001\267\001\232\170\232\170\232\170\232\170" +
    "\232\170\232\170\232\170\232\170\267\001\232" +
    "\170\232\170\232\170\232\170\232\170\232\170" +
    "\174\172\267\001\267\001\267\001\174\172\174" +
    "\172\267\001\267\001\267\001\267\001\267\001" +
    "\267\001\267\001\267\001\267\001\174\172\174" +
    "\172\267\001\267\001\267\001\174\172\174\172" +
    "\174\172\267\001\267\001\267\001\174\172\174" +
    "\172\174\172\267\001\267\001\174\172\174\172" +
    "\174\172\174\172\174\172\174\172\174\172\174" +
    "\172\267\001\174\172\174\172\174\172\174\172" +
    "\174\172\174\172\221\250\267\001\267\001\267" +
    "\001\221\250\221\250\267\001\267\001\267\001" +
    "\267\001\267\001\267\001\267\001\267\001\267" +
    "\001\221\250\267\001\267\001\267\001\267\001" +
    "\221\250\221\250\221\250\267\001\267\001\267" +
    "\001\221\250\221\250\221\250\267\001\267\001" +
    "\221\250\221\250\221\250\221\250\221\250\221" +
    "\250\221\250\221\250\267\001\221\250\221\250" +
    "\221\250\221\250\221\250\221\250\177\252\267" +
    "\001\267\001\267\001\177\252\177\252\267\001" +
    "\267\001\267\001\267\001\267\001\267\001\267" +
    "\001\267\001\267\001\177\252\267\001\267\001" +
    "\267\001\267\001\177\252\177\252\177\252\267" +
    "\001\267\001\267\001\177\252\177\252\177\252" +
    "\267\001\267\001\177\252\177\252\177\252\177" +
    "\252\177\252\177\252\177\252\177\252\267\001" +
    "\177\252\177\252\177\252\177\252\177\252\177" +
    "\252\141\260\267\001\267\001\267\001\141\260" +
    "\141\363\267\001\267\001\267\001\267\001\267" +
    "\001\267\001\267\001\267\001\267\001\141\365" +
    "\267\001\267\001\267\001\267\001\141\367\141" +
    "\367\141\367\267\001\267\001\267\001\141\367" +
    "\141\367\141\367\267\001\267\001\141\367\141" +
    "\367\141\367\141\367\141\367\141\367\141\367" +
    "\141\367\267\001\141\367\141\371\141\367\141" +
    "\367\141\367\141\373\110\250\267\001\267\001" +
    "\267\001\110\250\110\250\267\001\267\001\267" +
    "\001\267\001\267\001\267\001\267\001\267\001" +
    "\267\001\110\250\267\001\250\236\267\001\267" +
    "\001\110\250\110\250\110\250\250\275\267\001" +
    "\250\236\110\250\110\250\110\250\267\001\267" +
    "\001\110\250\110\250\110\250\110\250\110\250" +
    "\110\250\110\250\110\250\267\001\110\250\110" +
    "\250\110\250\110\250\110\250\110\250\152\214" +
    "\152\214\267\001\267\001\250\236\250\236\152" +
    "\214\152\214\267\001\152\214\152\214\267\001" +
    "\267\001\267\001\267\001\267\001\267\001\267" +
    "\001\267\001\267\001\152\214\152\214\152\214" +
    "\267\001\267\001\267\001\152\214\152\214\152" +
    "\214\267\001\267\001\152\214\152\214\152\214" +
    "\152\214\152\214\152\214\152\214\152\214\267" +
    "\001\152\214\247\240\152\214\152\214\152\214" +
    "\044\212\044\212\247\275\267\001\247\240\267" +
    "\001\044\212\044\212\267\001\044\212\044\212" +
    "\267\001\267\001\267\001\267\001\166\232\267" +
    "\001\267\001\267\001\267\001\044\212\044\212" +
    "\044\212\166\232\267\001\267\001\044\212\044" +
    "\212\044\212\247\240\247\240\044\212\044\212" +
    "\044\212\044\212\044\212\044\212\044\212\044" +
    "\212\267\001\044\212\267\001\044\212\044\212" +
    "\044\212\100\064\100\064\267\001\166\u011f\166" +
    "\u0121\267\001\100\212\100\212\267\001\267\001" +
    "\100\212\267\001\267\001\267\001\267\001\267" +
    "\001\267\001\267\001\267\001\267\001\100\212" +
    "\100\212\100\212\267\001\267\001\267\001\100" +
    "\212\100\212\100\212\267\001\267\001\100\212" +
    "\100\212\100\212\100\212\100\212\100\212\100" +
    "\212\100\212\267\001\100\212\102\216\100\212" +
    "\100\212\100\212\267\001\102\231\102\216\267" +
    "\001\102\216\102\273\267\001\267\001\267\001" +
    "\267\001\162\234\267\001\267\001\267\001\267" +
    "\001\102\216\102\216\102\216\162\234\267\001" +
    "\267\001\102\216\102\216\102\216\267\001\267" +
    "\001\102\216\102\216\102\216\102\216\102\216" +
    "\102\216\102\216\102\216\216\222\102\216\267" +
    "\001\102\216\102\216\102\216\216\222\267\001" +
    "\216\222\162\234\162\234\267\001\267\001\267" +
    "\001\267\001\267\001\267\001\267\001\267\001" +
    "\216\222\216\222\216\222\267\001\267\001\267" +
    "\001\216\222\216\222\216\222\267\001\267\001" +
    "\216\222\216\222\216\222\216\222\216\222\216" +
    "\222\216\222\216\222\167\220\216\222\267\001" +
    "\216\222\216\222\216\222\167\220\267\001\167" +
    "\220\267\001\267\001\267\001\267\001\267\001" +
    "\267\001\267\001\267\001\267\001\267\001\167" +
    "\220\167\220\167\220\267\001\267\001\267\001" +
    "\167\220\167\220\167\220\267\001\267\001\167" +
    "\220\167\220\167\220\167\220\167\220\167\220" +
    "\167\220\167\220\103\275\167\220\267\001\167" +
    "\220\167\220\167\220\267\001\267\001\267\001" +
    "\267\001\267\001\267\001\267\001\103\056\103" +
    "\056\103\056\267\001\267\001\267\001\103\056" +
    "\103\056\103\056\267\001\267\001\103\056\103" +
    "\056\103\056\103\056\103\056\103\056\103\056" +
    "\103\056\267\001\103\056\267\001\103\056\103" +
    "\056\103\056\253\256\253\256\267\001\267\001" +
    "\267\001\253\256\253\256\253\256\267\001\267" +
    "\001\267\001\253\256\253\256\253\256\267\001" +
    "\267\001\253\256\253\256\253\256\253\256\253" +
    "\256\253\256\253\256\253\256\267\001\253\256" +
    "\253\256\253\256\253\256\253\256\253\256\225" +
    "\365\225\u0155\267\001\267\001\267\001\225\367" +
    "\225\367\225\367\267\001\267\001\267\001\225" +
    "\367\225\367\225\367\267\001\267\001\225\367" +
    "\225\367\225\367\225\367\225\367\225\367\225" +
    "\367\225\367\267\001\225\367\225\371\225\367" +
    "\225\367\225\367\225\373\224\254\224\254\267" +
    "\001\267\001\267\001\224\254\224\254\224\254" +
    "\267\001\267\001\267\001\224\254\224\254\224" +
    "\254\267\001\267\001\224\254\224\254\224\254" +
    "\224\254\224\254\224\254\224\254\224\254\267" +
    "\001\224\254\224\254\224\254\224\254\224\254" +
    "\224\254\172\365\267\001\267\001\267\001\267" +
    "\001\172\367\172\367\172\367\267\001\267\001" +
    "\267\001\172\367\172\367\172\367\267\001\267" +
    "\001\172\367\172\367\172\367\172\367\172\367" +
    "\172\367\172\367\172\367\267\001\172\367\172" +
    "\371\172\367\172\367\172\367\172\373\211\247" +
    "\211\247\211\247\267\001\267\001\267\001\211" +
    "\247\211\247\211\247\267\001\267\001\211\247" +
    "\211\247\211\247\211\247\211\247\211\247\211" +
    "\247\211\247\267\001\211\247\267\001\211\247" +
    "\211\247\211\247\211\251\062\247\062\247\062" +
    "\247\267\001\267\001\267\001\062\247\062\247" +
    "\062\247\267\001\267\001\062\247\062\247\062" +
    "\247\062\247\062\247\062\247\062\247\062\247" +
    "\267\001\062\247\267\001\062\247\062\247\062" +
    "\247\062\251\061\074\061\074\061\074\267\001" +
    "\267\001\267\001\061\074\061\074\061\074\267" +
    "\001\267\001\061\074\061\074\061\074\061\074" +
    "\061\074\061\074\061\074\061\074\267\001\061" +
    "\074\267\001\061\074\061\074\061\074\061\074" +
    "\060\072\060\072\060\072\267\001\267\001\267" +
    "\001\060\072\060\072\060\072\267\001\267\001" +
    "\060\072\060\072\060\072\060\072\060\072\060" +
    "\072\060\072\060\072\267\001\060\072\267\001" +
    "\060\072\060\072\060\072\060\072\057\070\057" +
    "\070\057\070\267\001\267\001\267\001\057\070" +
    "\057\070\057\070\267\001\267\001\057\070\057" +
    "\070\057\070\057\070\057\070\057\070\057\070" +
    "\057\070\267\001\057\070\267\001\057\070\057" +
    "\070\057\070\057\070\171\u0127\171\u0127\171\u0127" +
    "\267\001\267\001\267\001\171\u0127\171\u0127\171" +
    "\u0127\267\001\267\001\171\u0127\171\u0127\171\u0127" +
    "\171\u0127\171\u0127\171\u0127\171\u0127\171\u0127\267" +
    "\001\171\u0127\267\001\171\u0127\171\u0127\171\u0127" +
    "\160\173\160\173\160\173\267\001\267\001\267" +
    "\001\160\173\160\173\160\173\267\001\267\001" +
    "\160\173\160\173\160\173\160\173\160\173\160" +
    "\173\160\173\160\173\267\001\160\173\267\001" +
    "\160\173\160\173\160\173\101\046\101\046\101" +
    "\046\267\001\267\001\267\001\101\046\101\046" +
    "\101\046\267\001\267\001\101\046\101\046\101" +
    "\046\101\046\101\046\101\046\101\046\101\046" +
    "\267\001\101\046\267\001\101\046\101\046\101" +
    "\046\056\245\056\245\056\245\267\001\267\001" +
    "\267\001\056\245\056\245\056\245\267\001\267" +
    "\001\056\245\056\245\056\245\056\245\056\245" +
    "\056\245\056\245\056\245\267\001\056\245\267" +
    "\001\056\245\056\245\056\245\030\173\030\173" +
    "\030\173\267\001\267\001\267\001\030\173\030" +
    "\173\030\173\267\001\267\001\030\173\030\173" +
    "\030\173\030\173\030\173\030\173\030\173\030" +
    "\173\267\001\030\173\267\001\030\173\030\173" +
    "\030\173\267\001\267\001\320\001\001\244\001" +
    "\001\114\074\064\065\213\001\001\004\003\100" +
    "\112\113\245\076\077\062\001\137\140\007\104" +
    "\251\214\261\176\176\001\173\173\123\232\264" +
    "\063\063\075\224\177\200\125\126\002\024\075" +
    "\176\223\035\173\122\076\144\145\113\141\200" +
    "\253\141\123\254\107\225\232\044\102\163\164" +
    "\165\166\001\036\071\154\053\152\101\076\077" +
    "\044\102\250\150\151\112\051\075\044\102\247" +
    "\105\040\044\053\114\001\066\130\075\113\044" +
    "\102\103\132\156\112\130\004\044\045\017\044" +
    "\102\163\161\246\166\134\113\021\000\212\153" +
    "\067\002\133\070\222\127\170\240\112\205\266" +
    "\132\002\265\263\260\117\257\067\057\004\255" +
    "\234\204\023\034\244\210\001\001\126\001\122" +
    "\120\003\001\001\117\010\023\024\025\026\001" +
    "\001\023\027\030\031\116\001\001\032\113\001" +
    "\001\033\034\035\036\001\001\037\001\001\040" +
    "\001\001\001\001\041\001\001\001\001\001\001" +
    "\001\001\001\001\001\023"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }




    public void report_error(String message, Object symbol) {
		ErrorManager.getManager().emit_error(message+ " \"" + symbol + "\"");
    }

    public void report_fatal_error(String message, Object symbol) {
		ErrorManager.getManager().emit_fatal(message+ " \"" + symbol + "\"");
    }

/** 
 * global variables to store the grammar the directives and a factory to build various concepts
 */ 
	private IFactory factory;
	private Grammar grammar;
	private DirectiveSet directives;

    public void setGrammar(Grammar  grammar) {
        this.grammar = grammar;
    }
    
    public void setFactory(IFactory factory) {
        this.factory = factory;
    }
    
    public void setDirectiveSet(DirectiveSet directives) {
        this.directives = directives;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {



    private Grammar getGrammar() {
        return parser.grammar;
    }
    
    public IFactory getFactory() {
        return parser.factory;
    }
    
    public DirectiveSet getDirectives() {
        return parser.directives;
    }
    
	/** current kind of symbol to declare */
	private SymbolKind currentKind;
	/** current type of symbol to declare */
	private String currentType;

	/** Current precedence priority */
	private int currentPriority = 0;
	/** Current precedence associativity */
	private Associativity currentAssociativity = Associativity.NO;

	/** update the precedences we are declaring */
	private void updatePrecedence(Associativity associativity) {
		this.currentAssociativity = associativity;
		if (associativity != Associativity.NO) {
			++this.currentPriority;
	    }
	}
  
	private GrammarSymbol lhs = null;

	/** update the lhs symbol of a production */
	private void updateLhs(GrammarSymbol lhs) {
		this.lhs = lhs;
    }
  
	private GrammarSymbol getKnownSymbol(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		GrammarSymbol sym = getGrammar().getSymbol(id);
		if (sym == null) {
			ErrorManager.getManager().emit_error("Symbol \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  
	private Terminal getKnownTerminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		Terminal sym = getGrammar().getTerminal(id);
		if (sym == null) {
			ErrorManager.getManager().emit_error("Terminal \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  
	private NonTerminal getKnownNonTerminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		NonTerminal sym = getGrammar().getNonTerminal(id);
		if (sym == null) {
			ErrorManager.getManager().emit_error("Non terminal \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
    
	private State getKnownState(com.github.jhoenicke.javacup.runtime.Symbol location, String id) {
		State sym = getGrammar().getState(id);
		if (sym == null) {
			ErrorManager.getManager().emit_error("State \"" + id + "\" has not been declared", location);
		}
		return sym;
	}
  

  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= grammar EOF 
          case 0:
            {
              Object RESULT;
RESULT = null;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$START, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= package_spec SEMICOLON 
          // spec ::= option_spec SEMICOLON 
          // spec ::= parser_spec SEMICOLON 
          // spec ::= symbol_spec SEMICOLON 
          // spec ::= precedence_spec SEMICOLON 
          // spec ::= expect_spec SEMICOLON 
          // spec ::= start_spec SEMICOLON 
          // spec ::= production_spec SEMICOLON 
          // spec ::= error SEMICOLON 
          case 1:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.spec, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= PACKAGE multipart_id 
          case 2:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;

								if ( ! getDirectives().setDirective(Directive.PACKAGE_NAME, id.toString())) {
									ErrorManager.getManager().emit_warning("Redundant package name (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.package_spec, CUP$stack.get(CUP$size - 2), id$);
            }

          // parser_spec ::= PARSER multipart_id 
          case 3:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              StringBuilder name = (StringBuilder) name$.value;

								if ( ! getDirectives().setDirective(Directive.PARSER_NAME, name.toString())) {
									ErrorManager.getManager().emit_warning("Redundant parser name (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.parser_spec, CUP$stack.get(CUP$size - 2), name$);
            }

          // option_spec ::= OPTION option_list 
          case 4:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_spec, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis2 ::= COMMA option_ 
          case 5:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis2, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_ $parenthesis2$0_many 
          case 6:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // option_ ::= robust_id 
          case 7:
            {
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;

								if ( ! getDirectives().addDirective(Directive.OPTION, opt, null)) {
									ErrorManager.getManager().emit_warning("Redundant option " + opt + " (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_, opt$, opt$);
            }

          // option_ ::= robust_id EQUALS robust_id 
          case 8:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;

								if ( ! getDirectives().addDirective(Directive.OPTION, opt, val)) {
									ErrorManager.getManager().emit_warning("Redundant option " + opt + " = " + val + " (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.option_, opt$, val$);
            }

          // custom_code_spec ::= key_code CODE_STRING 
          case 9:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol key$ = CUP$stack.get(CUP$size - 2);
              Directive key = (Directive) key$.value;

								if ( ! getDirectives().setDirective(key, code)) {
									ErrorManager.getManager().emit_warning("Redundant " + key + " (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.custom_code_spec, key$, code$);
            }

          // key_code ::= PARSER ACTION CODE 
          case 10:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_ACTION_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER IMPORT CODE 
          case 11:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_IMPORT_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER CODE 
          case 12:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER INIT WITH 
          case 13:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_INIT_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= PARSER AFTER REDUCE 
          case 14:
            {
              Directive RESULT;
 RESULT = Directive.PARSER_AFTER_REDUCE_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= SCANNER IMPORT CODE 
          case 15:
            {
              Directive RESULT;
 RESULT = Directive.SCANNER_IMPORT_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // key_code ::= SCANNER CODE 
          case 16:
            {
              Directive RESULT;
 RESULT = Directive.SCANNER_CODE; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.key_code, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // symbol_spec ::= symbol_decl symbol_list 
          case 17:
            {
 currentType = null; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_spec, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol_decl ::= symbol_kind symbol_type 
          case 18:
            {
              com.github.jhoenicke.javacup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol kind$ = CUP$stack.get(CUP$size - 2);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_decl, kind$, type$);
            }

          // symbol_kind ::= TERMINAL 
          case 19:
            {
 currentKind = SymbolKind.TERMINAL; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_kind, CUP$sym, CUP$sym);
            }

          // symbol_kind ::= NONTERMINAL 
          case 20:
            {
 currentKind = SymbolKind.NONTERMINAL; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_kind, CUP$sym, CUP$sym);
            }

          // symbol_kind ::= STATE 
          case 21:
            {
 currentKind = SymbolKind.STATE; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_kind, CUP$sym, CUP$sym);
            }

          // symbol_type ::= type_id 
          case 22:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 currentType = id.toString(); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_type, id$, id$);
            }

          // $parenthesis3 ::= COMMA new_symbol_id 
          case 23:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis3, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol_list ::= new_symbol_id $parenthesis3$0_many 
          case 24:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.symbol_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // new_symbol_id ::= symbol_id 
          case 25:
            {
              com.github.jhoenicke.javacup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
 
								if (getGrammar().getSymbol(sym_id) != null) {
									ErrorManager.getManager().emit_error("Symbol \"" + sym_id + "\" has already been declared", sym_id$);
								} else {
									GrammarSymbol symbol = getFactory().createSymbol(currentKind, sym_id, currentType);
									if (symbol == null) {
										ErrorManager.getManager().emit_error("Symbol \"" + sym_id + "\" is not declared", sym_id$);
									} else {
										getGrammar().addUniqueSymbol(symbol);
									}
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.new_symbol_id, sym_id$, sym_id$);
            }

          // precedence_spec ::= PRECEDENCE associativity_decl precedence_list 
          case 26:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precedence_spec, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // associativity_decl ::= LEFT 
          case 27:
            {
 updatePrecedence(Associativity.LEFT); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.associativity_decl, CUP$sym, CUP$sym);
            }

          // associativity_decl ::= RIGHT 
          case 28:
            {
 updatePrecedence(Associativity.RIGHT); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.associativity_decl, CUP$sym, CUP$sym);
            }

          // associativity_decl ::= NONASSOC 
          case 29:
            {
 updatePrecedence(Associativity.NONE); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.associativity_decl, CUP$sym, CUP$sym);
            }

          // $parenthesis4 ::= COMMA precterminal_id 
          case 30:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis4, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // precedence_list ::= precterminal_id $parenthesis4$0_many 
          case 31:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precedence_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_id ::= symbol_id 
          case 32:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;

								Terminal symbol = getKnownTerminal(name$, name);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Symbol \"" + name + "\" is not declared and cannot be used for precedence", name$);
								} else {
									symbol.setPrecedence(currentPriority, currentAssociativity);
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precterminal_id, name$, name$);
            }

          // precterminal_id ::= REGEXP 
          case 33:
            {
              com.github.jhoenicke.javacup.runtime.Symbol content$ = CUP$stack.get(CUP$size - 1);
              String content = (String) content$.value;

								RegExp symbol = getGrammar().getOrAddRegexp(content);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Regexp \"" + content + "\" cannot be declared for precedence", content$);
								} else {
									symbol.setPrecedence(currentPriority, currentAssociativity);
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.precterminal_id, content$, content$);
            }

          // expect_spec ::= EXPECT robust_id 
          case 34:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;

								if ( ! getDirectives().setDirective(Directive.EXPECT, val)) {
									ErrorManager.getManager().emit_warning("Redundant expect (skipping)");
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.expect_spec, CUP$stack.get(CUP$size - 2), val$);
            }

          // start_spec ::= START WITH symbol_id 
          case 35:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;

								NonTerminal symbol = getKnownNonTerminal(name$, name);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Symbol \"" + name + "\" is not declared for start symbol", name$);
								} else {
									getGrammar().setStartSymbol(symbol); 
								}
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.start_spec, CUP$stack.get(CUP$size - 3), name$);
            }

          // production_spec ::= lhs_nonterminal COLON_COLON_EQUALS rhs_nonterminal_list 
          // production_spec ::= lhs_terminal COLON_COLON_EQUALS rhs_terminal_list 
          // production_spec ::= lhs_state COLON_COLON_EQUALS rhs_state_list 
          case 36:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.production_spec, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // production_spec ::= ID NT$0 error 
          case 37:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 3);
              String name = (String) name$.value;
              return parser.getSymbolFactory2().newSymbol(ENonterminal.production_spec, name$, CUP$stack.get(CUP$size - 1));
            }

          // NT$0 ::= 
          case 38:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              String name = (String) name$.value;
 ErrorManager.getManager().emit_error("Symbol \"" + name + "\" is not declared for production rule", name$); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.NT$0, name$, name$);
            }

          // lhs_nonterminal ::= SYMBOL_NONTERMINAL 
          case 39:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;
 updateLhs(getKnownNonTerminal(lhs_id$, lhs_id)); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.lhs_nonterminal, lhs_id$, lhs_id$);
            }

          // $parenthesis5 ::= BAR SYMBOL_TERMINAL 
          case 40:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis5, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // lhs_terminal ::= SYMBOL_TERMINAL $parenthesis5$0_many 
          case 41:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 2);
              String lhs_id = (String) lhs_id$.value;
 updateLhs(getKnownTerminal(lhs_id$, lhs_id)); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.lhs_terminal, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // lhs_state ::= SYMBOL_STATE 
          case 42:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;
 updateLhs(getKnownState(lhs_id$, lhs_id)); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.lhs_state, lhs_id$, lhs_id$);
            }

          // $parenthesis6 ::= BAR rhs_nonterminal 
          case 43:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis6, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_nonterminal_list ::= rhs_nonterminal $parenthesis6$0_many 
          case 44:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_nonterminal_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_nonterminal ::= prod_part$0_many prod_precedence$0_1 
          case 45:
            {
              com.github.jhoenicke.javacup.runtime.Symbol precedence$ = CUP$stack.get(CUP$size - 1);
              Terminal precedence = (Terminal) precedence$.value;
              com.github.jhoenicke.javacup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              java.util.List<ProductionPart> rhs = (java.util.List<ProductionPart>) rhs$.value;

								Production production = getFactory().createNonTerminalProduction(lhs, rhs, precedence);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_nonterminal, rhs$, precedence$);
            }

          // $parenthesis7 ::= BAR rhs_terminal 
          case 46:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis7, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_terminal_list ::= rhs_terminal $parenthesis7$0_many 
          case 47:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_terminal ::= REGEXP CODE_STRING$0_1 
          case 48:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 2);
              String regexp = (String) regexp$.value;

								Production production = getFactory().createSimpleTerminalProduction(lhs, regexp, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, regexp$, code$);
            }

          // rhs_terminal ::= REGEXP TILDA REGEXP CODE_STRING$0_1 
          case 49:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;

								Production enter = getFactory().createEnterStateTerminalProduction(lhs, from, null);
								getGrammar().addProduction(enter);
								Production in = getFactory().createInStateTerminalProduction(lhs, null);
								getGrammar().addProduction(in);
								Production leave = getFactory().createLeaveStateTerminalProduction(lhs, to, code);
								getGrammar().addProduction(leave);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, from$, code$);
            }

          // rhs_terminal ::= REGEXP TILDA SYMBOL_STATE CODE_STRING$0_1 
          case 50:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol state$ = CUP$stack.get(CUP$size - 2);
              String state = (String) state$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;

								Production production = getFactory().createEnterStateTerminalProduction(lhs, from, state, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, from$, code$);
            }

          // rhs_terminal ::= SYMBOL_STATE REGEXP CODE_STRING$0_1 
          case 51:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 2);
              String regexp = (String) regexp$.value;
              com.github.jhoenicke.javacup.runtime.Symbol state$ = CUP$stack.get(CUP$size - 3);
              String state = (String) state$.value;

								Production production = getFactory().createInStateTerminalProduction(lhs, state, regexp, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, state$, code$);
            }

          // rhs_terminal ::= SYMBOL_STATE TILDA REGEXP CODE_STRING$0_1 
          case 52:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 2);
              String regexp = (String) regexp$.value;
              com.github.jhoenicke.javacup.runtime.Symbol in$ = CUP$stack.get(CUP$size - 4);
              String in = (String) in$.value;

								Production production = getFactory().createLeaveStateTerminalProduction(lhs, in, regexp, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, in$, code$);
            }

          // rhs_terminal ::= SYMBOL_STATE TILDA REGEXP SYMBOL_STATE CODE_STRING$0_1 
          case 53:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol regexp$ = CUP$stack.get(CUP$size - 3);
              String regexp = (String) regexp$.value;
              com.github.jhoenicke.javacup.runtime.Symbol in$ = CUP$stack.get(CUP$size - 5);
              String in = (String) in$.value;

								Production production = getFactory().createEnterStateTerminalProduction(lhs, in, regexp, to, code);
								getGrammar().addProduction(production);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_terminal, in$, code$);
            }

          // $parenthesis8 ::= BAR rhs_state 
          case 54:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis8, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_state_list ::= rhs_state $parenthesis8$0_many 
          case 55:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_state_list, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_state ::= REGEXP TILDA REGEXP CODE_STRING$0_1 
          case 56:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;

								Production enter = getFactory().createEnterStateStateProduction(lhs, from, null);
								getGrammar().addProduction(enter);
								Production leave = getFactory().createLeaveStateStateProduction(lhs, to, code);
								getGrammar().addProduction(leave);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_state, from$, code$);
            }

          // rhs_state ::= SYMBOL_STATE REGEXP TILDA REGEXP CODE_STRING$0_1 
          case 57:
            {
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
              com.github.jhoenicke.javacup.runtime.Symbol to$ = CUP$stack.get(CUP$size - 2);
              String to = (String) to$.value;
              com.github.jhoenicke.javacup.runtime.Symbol from$ = CUP$stack.get(CUP$size - 4);
              String from = (String) from$.value;
              com.github.jhoenicke.javacup.runtime.Symbol in$ = CUP$stack.get(CUP$size - 5);
              String in = (String) in$.value;

								Production enter = getFactory().createEnterStateStateProduction(lhs, in, from, null);
								getGrammar().addProduction(enter);
								Production leave = getFactory().createLeaveStateStateProduction(lhs, to, code);
								getGrammar().addProduction(leave);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.rhs_state, in$, code$);
            }

          // prod_precedence ::= PERCENT_PREC symbol_id 
          case 58:
            {
              Terminal RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
 RESULT = getKnownTerminal(term$, term); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_precedence, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // prod_part ::= wild_symbol_id label_id$0_1 
          case 59:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol label$ = CUP$stack.get(CUP$size - 1);
              String label = (String) label$.value;
              com.github.jhoenicke.javacup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 2);
              ProductionPart symb = (ProductionPart) symb$.value;
 RESULT = getFactory().createSimplePart(symb, label); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part, symb$, label$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 60:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol code$ = CUP$stack.get(CUP$size - 1);
              String code = (String) code$.value;
 RESULT = getFactory().createActionPart(code); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part, code$, code$, RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id STAR 
          case 61:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              ProductionPart child = (ProductionPart) child$.value;
 RESULT = getFactory().createMany0Part(child); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id PLUS 
          case 62:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              ProductionPart child = (ProductionPart) child$.value;
 RESULT = getFactory().createMany1Part(child); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id QUESTION 
          case 63:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol child$ = CUP$stack.get(CUP$size - 2);
              ProductionPart child = (ProductionPart) child$.value;
 RESULT = getFactory().createOptionalPart(child); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, child$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= symbol_id 
          case 64:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 1);
              String symid = (String) symid$.value;
 RESULT = getFactory().createSymbolPart(getKnownSymbol(symid$, symid)); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, symid$, symid$, RESULT);
            }

          // wild_symbol_id ::= REGEXP 
          case 65:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol content$ = CUP$stack.get(CUP$size - 1);
              String content = (String) content$.value;

								RegExp symbol = getGrammar().getOrAddRegexp(content);
								if (symbol == null) {
									ErrorManager.getManager().emit_error("Regexp \"" + content + "\" cannot be used ", content$);
								}
								RESULT = getFactory().createSymbolPart(symbol);
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, content$, content$, RESULT);
            }

          // wild_symbol_id ::= LPARENT prod_part$1_many RPARENT 
          case 66:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol prod$ = CUP$stack.get(CUP$size - 2);
              java.util.List<ProductionPart> prod = (java.util.List<ProductionPart>) prod$.value;
 RESULT = getFactory().createGroupPart(prod); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wild_symbol_id, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // label_id ::= COLON robust_id 
          case 67:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol label$ = CUP$stack.get(CUP$size - 1);
              String label = (String) label$.value;
 RESULT = label; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.label_id, CUP$stack.get(CUP$size - 2), label$, RESULT);
            }

          // multipart_id ::= robust_id 
          case 68:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              String id = (String) id$.value;
 RESULT = new StringBuilder(id); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.multipart_id, id$, id$, RESULT);
            }

          // multipart_id ::= multipart_id DOT robust_id 
          case 69:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              String id = (String) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append('.').append(id); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.multipart_id, list$, id$, RESULT);
            }

          // type_id ::= multipart_id 
          case 70:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type_id, id$, id$, RESULT);
            }

          // type_id ::= type_id LBRACK RBRACK 
          case 71:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id.append("[]"); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type_id, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id LT typearglist GT 
          case 72:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id.append('<').append(types).append('>'); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.type_id, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typeargument 
          case 73:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              StringBuilder type = (StringBuilder) type$.value;
 RESULT = type; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typearglist, type$, type$, RESULT);
            }

          // typearglist ::= typearglist COMMA typeargument 
          case 74:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              com.github.jhoenicke.javacup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append(",").append(arg); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typearglist, list$, arg$, RESULT);
            }

          // typeargument ::= type_id 
          case 75:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol type$ = CUP$stack.get(CUP$size - 1);
              StringBuilder type = (StringBuilder) type$.value;
 RESULT = type; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typeargument, type$, type$, RESULT);
            }

          // typeargument ::= wildcard 
          case 76:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 1);
              StringBuilder name = (StringBuilder) name$.value;
 RESULT = name; 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.typeargument, name$, name$, RESULT);
            }

          // wildcard ::= QUESTION 
          case 77:
            {
              StringBuilder RESULT;
 RESULT = new StringBuilder("?"); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wildcard, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 78:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" extends ").append(id); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wildcard, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 79:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" super ").append(id); 
              return parser.getSymbolFactory2().newSymbol(ENonterminal.wildcard, w$, id$, RESULT);
            }

          // robust_id ::= error 
          case 80:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = CUP$stack.get(CUP$size - 1);

								ErrorManager.getManager().emit_error("Illegal use of reserved word", e$);
								RESULT="ILLEGAL";
							
              return parser.getSymbolFactory2().newSymbol(ENonterminal.robust_id, e$, e$, RESULT);
            }

          // CODE_STRING$0_1 ::= 
          case 81:
            {
              String RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.CODE_STRING$0_1, CUP$sym, CUP$sym, RESULT);
            }

          // label_id$0_1 ::= 
          case 82:
            {
              String RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.label_id$0_1, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part$0_many ::= 
          case 83:
            {
              java.util.ArrayList<ProductionPart> RESULT = new java.util.ArrayList<ProductionPart>();
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$0_many, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part$0_many ::= prod_part$0_many prod_part 
          case 84:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<ProductionPart> RESULT = (java.util.ArrayList<ProductionPart>) CUP$0.value;
              RESULT.add((ProductionPart) CUP$1.value);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$0_many, CUP$0, CUP$1, RESULT);
            }

          // prod_part$1_many ::= prod_part 
          case 85:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<ProductionPart> RESULT = new java.util.ArrayList<ProductionPart>();
              RESULT.add((ProductionPart) CUP$0.value);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$1_many, CUP$0, CUP$0, RESULT);
            }

          // prod_part$1_many ::= prod_part$1_many prod_part 
          case 86:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<ProductionPart> RESULT = (java.util.ArrayList<ProductionPart>) CUP$0.value;
              RESULT.add((ProductionPart) CUP$1.value);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_part$1_many, CUP$0, CUP$1, RESULT);
            }

          // prod_precedence$0_1 ::= 
          case 87:
            {
              Terminal RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.prod_precedence$0_1, CUP$sym, CUP$sym, RESULT);
            }

          // $parenthesis1$0_many ::= 
          case 88:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis1$0_many ::= $parenthesis1$0_many $parenthesis1 
          case 89:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis1$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis2$0_many ::= 
          case 90:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis2$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis2$0_many ::= $parenthesis2$0_many $parenthesis2 
          case 91:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis2$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis3$0_many ::= 
          case 92:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis3$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis3$0_many ::= $parenthesis3$0_many $parenthesis3 
          case 93:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis3$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis4$0_many ::= 
          case 94:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis4$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis4$0_many ::= $parenthesis4$0_many $parenthesis4 
          case 95:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis4$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis5$0_many ::= 
          case 96:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis5$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis5$0_many ::= $parenthesis5$0_many $parenthesis5 
          case 97:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis5$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis6$0_many ::= 
          case 98:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis6$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis6$0_many ::= $parenthesis6$0_many $parenthesis6 
          case 99:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis6$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis7$0_many ::= 
          case 100:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis7$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis7$0_many ::= $parenthesis7$0_many $parenthesis7 
          case 101:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis7$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // $parenthesis8$0_many ::= 
          case 102:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis8$0_many, CUP$sym, CUP$sym);
            }

          // $parenthesis8$0_many ::= $parenthesis8$0_many $parenthesis8 
          case 103:
            {
              return parser.getSymbolFactory2().newSymbol(ENonterminal.$parenthesis8$0_many, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
